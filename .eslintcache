[{"/Users/braedencraig/Desktop/idee-swyft-updates/src/index.js":"1","/Users/braedencraig/Desktop/idee-swyft-updates/src/reportWebVitals.js":"2","/Users/braedencraig/Desktop/idee-swyft-updates/src/App.js":"3","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Button.js":"4","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Nav.js":"5","/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/bandcamp.js":"6","/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/chitchats.js":"7","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Card.js":"8","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/PdfGenerator.js":"9","/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/axios.js":"10","/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/webflow.js":"11","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/WebflowCard.js":"12","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/PdfGeneratorWebflow.js":"13"},{"size":500,"mtime":1616959796000,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1606789933000,"results":"16","hashOfConfig":"15"},{"size":9464,"mtime":1688404556549,"results":"17","hashOfConfig":"15"},{"size":1423,"mtime":1680996768039,"results":"18","hashOfConfig":"15"},{"size":214,"mtime":1659362913000,"results":"19","hashOfConfig":"15"},{"size":4266,"mtime":1680984263119,"results":"20","hashOfConfig":"15"},{"size":13048,"mtime":1697992189312,"results":"21","hashOfConfig":"15"},{"size":13481,"mtime":1697913498206,"results":"22","hashOfConfig":"15"},{"size":3674,"mtime":1681067528468,"results":"23","hashOfConfig":"15"},{"size":852,"mtime":1666240599930,"results":"24","hashOfConfig":"15"},{"size":1486,"mtime":1680984289296,"results":"25","hashOfConfig":"15"},{"size":10952,"mtime":1680986413735,"results":"26","hashOfConfig":"15"},{"size":2485,"mtime":1666222186449,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"yvme9g",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},"/Users/braedencraig/Desktop/idee-swyft-updates/src/index.js",[],["62","63"],"/Users/braedencraig/Desktop/idee-swyft-updates/src/reportWebVitals.js",[],"/Users/braedencraig/Desktop/idee-swyft-updates/src/App.js",["64","65","66","67"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nimport { action, createStore, StoreProvider } from \"easy-peasy\";\nimport {\n  getCredentials,\n  getCredentialsTwo,\n  getBands,\n  getOrdersUnshipped,\n  getOrdersUnshippedTwo,\n} from \"./apis/bandcamp\";\nimport { getAllShipments } from \"./apis/chitchats\";\nimport { getOrdersUnshippedWebflow } from \"./apis/webflow\";\nimport Card from \"./components/Card\";\nimport WebflowCard from \"./components/WebflowCard\";\nimport Nav from \"./components/Nav\";\nimport Button from \"./components/Button\";\nimport Spinner from \"./logoidee.svg\";\nimport \"./App.css\";\n\nrequire(\"dotenv\").config();\n\nfunction App() {\n  const [loggedIn, isLoggedIn] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  // Setting up initial state\n  const [unfilledOrders, setUnfilledOrders] = useState(null);\n  const [token, setToken] = useState(\"\");\n  const [allShipments, setAllShipments] = useState(null);\n  const [bandcampError, setBandcampError] = useState(false);\n  // WEBFLOW STATE\n  // const [unfilledOrdersWebflow, setUnfilledOrdersWebflow] = useState(null);\n  // bandcamp two state\n  const [unfilledOrdersTwo, setUnfilledOrdersTwo] = useState(null);\n  const [tokenTwo, setTokenTwo] = useState(\"\");\n  // webflow state\n  const [unfilledOrdersWebflow, setUnfilledOrdersWebflow] = useState(null);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      if (\n        username === process.env.REACT_APP_USER &&\n        password === process.env.REACT_APP_PASSWORD\n      ) {\n        isLoggedIn(true);\n        console.log(username, password);\n        localStorage.setItem(\"user\", `${username}`);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Setting up easy-peasy store to handle info/tracking pngs when creating shipment labels\n  const store = createStore({\n    pngs: {\n      urls: [],\n      info: [],\n      add: action((state, payload) => {\n        state.urls.push(payload);\n      }),\n      addInfo: action((state, payload) => {\n        state.info.push(payload);\n      }),\n    },\n    webflowPngs: {\n      urls: [],\n      info: [],\n      add: action((state, payload) => {\n        state.urls.push(payload);\n      }),\n      addInfo: action((state, payload) => {\n        state.info.push(payload);\n      }),\n    },\n    errors: {\n      items: [],\n      add: action((state, payload) => {\n        state.items.push(payload);\n      }),\n    },\n  });\n\n  useEffect(() => {\n    async function fetchData() {\n      // Get all current shipments from chitchats account\n      const allCurrentShipments = await getAllShipments();\n      setAllShipments(allCurrentShipments);\n      // Get bandcamp credentials\n      const clientCreds = await getCredentials();\n      const clientCredsTwo = await getCredentialsTwo();\n\n      if (clientCreds === \"error\" || clientCredsTwo === \"error\") {\n        // setBandcampError(true);\n        alert(\"REFRESH THE PAGE\");\n      } else {\n        const accessTkn = clientCreds?.data.access_token;\n        setToken(accessTkn);\n        const accessTknTwo = clientCredsTwo?.data.access_token;\n        setTokenTwo(accessTknTwo);\n        // Get all active bands from the record labels bandcamp database\n        const bands = await getBands(accessTkn);\n        const bandsTwo = await getBands(accessTknTwo);\n\n        // Get all unshipped orders for all bands\n        const ordersUnshipped = await getOrdersUnshipped(accessTkn, bands);\n        const ordersUnshippedTwo = await getOrdersUnshippedTwo(\n          accessTknTwo,\n          bandsTwo\n        );\n\n        // Here we are sorting the orders by payment id, if someone bought one record from one band and a shirt from another\n        // They would show up as two separate orders, but we wouldn't want to create two shipments for that one customer\n        // So we sort the unshipped orders by payment id\n        const result = ordersUnshipped.data.items.reduce(function (r, a) {\n          r[a.payment_id] = r[a.payment_id] || [];\n          // push all orders sharing payment id into an array.\n          r[a.payment_id].push(a);\n          return r;\n        }, Object.create(null));\n\n        const resultTwo = ordersUnshippedTwo.reduce(function (r, a) {\n          r[a.payment_id] = r[a.payment_id] || [];\n          // push all orders sharing payment id into an array.\n          r[a.payment_id].push(a);\n          return r;\n        }, Object.create(null));\n\n        // console.log(resultTwo);\n        // Now we have all orders sorted by paymentId\n        const sortedByPaymentId = Object.values(result);\n        const sortedByPaymentIdTwo = Object.values(resultTwo);\n\n        // If record label inputs the string \"skip\" in bandcamp database, we dont want to act upon that order. Filters em out.\n        const filteredOutSkip = sortedByPaymentId.filter(\n          (order) =>\n            order[0].ship_notes === null ||\n            order[0].ship_notes.indexOf(\"skip\") === -1\n        );\n        const filteredOutSkipTwo = sortedByPaymentIdTwo.filter(\n          (order) =>\n            order[0].ship_notes === null ||\n            order[0].ship_notes.indexOf(\"skip\") === -1\n        );\n        // Finally we set all unfilled orders here.\n        setUnfilledOrders(filteredOutSkip);\n        setUnfilledOrdersTwo(filteredOutSkipTwo);\n\n        const webflowOrders = await getOrdersUnshippedWebflow();\n        setUnfilledOrdersWebflow(webflowOrders);\n\n        const user = localStorage.getItem(\"user\");\n\n        if (user === process.env.REACT_APP_USER) {\n          isLoggedIn(true);\n        }\n      }\n    }\n    fetchData();\n  }, []);\n\n  // Bandcamp auth request every once in a while returns a 400, not sure why, but if it does happen\n  // a quick refresh sorts it out.\n  // if (bandcampError) {\n  //   window.location.reload();\n  //   return (\n  //     <div className=\"loadingDisplay\">\n  //       <h2>Error with Bandcamp API Secret, Please Refresh</h2>\n  //     </div>\n  //   );\n  // }\n\n  // If we have no orders, show loading state\n  if (unfilledOrders === null) {\n    return (\n      <div className=\"loadingDisplay\">\n        <h2>Gathering Unshipped Orders</h2>\n        <img className=\"rotate\" src={Spinner} alt=\"\" />\n      </div>\n    );\n  }\n\n  if (!loggedIn) {\n    return (\n      <div className=\"form\">\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label htmlFor=\"username\">Username:</label>\n            <input\n              type=\"text\"\n              id=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"password\">Password:</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n          </div>\n          <button type=\"submit\">Log In</button>\n        </form>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <StoreProvider store={store}>\n        <Nav>\n          <Button />\n        </Nav>\n        <div className=\"toBeShipped\">\n          <h2>\n            IF Bandcamp: {unfilledOrders === null ? \"0\" : unfilledOrders.length}{\" \"}\n            orders\n          </h2>\n          <div className=\"orderFlex\">\n            {unfilledOrders &&\n              unfilledOrders.map((orderToBeShipped, idx) => {\n                if (orderToBeShipped[0].payment_state !== \"refunded\") {\n                  return (\n                    <Card\n                      key={orderToBeShipped[0].sale_item_id}\n                      orderToBeShipped={orderToBeShipped}\n                      shipments={allShipments}\n                      token={token}\n                    />\n                  );\n                }\n              })}\n          </div>\n        </div>\n        <div className=\"toBeShipped\">\n          <h2>\n            IF Webflow:\n            {unfilledOrdersWebflow === null\n              ? \"0\"\n              : unfilledOrdersWebflow.length}{\" \"}\n            orders\n          </h2>\n          <div className=\"orderFlex\">\n            {unfilledOrdersWebflow &&\n              unfilledOrdersWebflow.map((orderToBeShipped, idx) => {\n                return (\n                  <WebflowCard\n                    key={orderToBeShipped.orderId}\n                    orderToBeShipped={orderToBeShipped}\n                    shipments={allShipments}\n                    token={token}\n                  />\n                );\n              })}\n          </div>\n          {/* <div className=\"button\">\n            <Button />\n          </div> */}\n        </div>\n        <div className=\"toBeShipped\">\n          <h2>\n            Ansible Bandcamp:{\" \"}\n            {unfilledOrdersTwo === null ? \"0\" : unfilledOrdersTwo.length} orders\n          </h2>\n          <div className=\"orderFlex\">\n            {unfilledOrdersTwo &&\n              unfilledOrdersTwo.map((orderToBeShipped, idx) => {\n                return (\n                  <Card\n                    key={orderToBeShipped[0].sale_item_id}\n                    orderToBeShipped={orderToBeShipped}\n                    shipments={allShipments}\n                    token={tokenTwo}\n                  />\n                );\n              })}\n          </div>\n          {/* <div className=\"button\">\n            <Button />\n          </div> */}\n        </div>\n      </StoreProvider>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Button.js",["68"],"import React, { useState } from \"react\";\nimport { useStoreState } from \"easy-peasy\";\nimport PdfGenerator from \"../components/PdfGenerator\";\nimport PdfGeneratorWebflow from \"../components/PdfGeneratorWebflow\";\n\nconst Button = () => {\n  // Initial state\n  const [confirm, setConfirm] = useState(false);\n\n  // Data from store for shipping image urls and info.\n  let urls = useStoreState((state) => state.pngs.urls);\n  let info = useStoreState((state) => state.pngs.info);\n\n  let webflowurls = useStoreState((state) => state.webflowPngs.urls);\n  let webflowinfo = useStoreState((state) => state.webflowPngs.info);\n\n  let errors = useStoreState((state) => state.errors.items);\n\n  const masterUrls = [...urls, ...webflowurls];\n  const masterInfo = [...info, ...webflowinfo];\n\n  return (\n    <div\n      className={`pdfGeneration ${\n        masterUrls.length === 0 ? \"pdfGenerationDisabled\" : \"\"\n      }`}\n    >\n      <button\n        className=\"buttonRounded\"\n        onClick={() => {\n          // On click we render the PdfGenerator\n          setConfirm(true);\n        }}\n      >\n        Generate Labels\n      </button>\n      {confirm && (\n        <PdfGenerator errors={errors} urls={masterUrls} info={masterInfo} />\n      )}\n      {/* {confirm && (\n        <PdfGeneratorWebflow\n          errors={errors}\n          urls={webflowurls}\n          info={webflowinfo}\n        />\n      )} */}\n    </div>\n  );\n};\n\nexport default Button;\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Nav.js",[],"/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/bandcamp.js",[],"/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/chitchats.js",["69","70","71","72","73","74","75"],"/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Card.js",["76","77","78"],"/* eslint-disable array-callback-return */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\nimport { useStoreActions } from \"easy-peasy\";\nimport { createShipment, buyShipment, getShipment } from \"../apis/chitchats\";\nimport { markAsShipped } from \"../apis/bandcamp\";\nimport Spinner from \"../logoidee.svg\";\n\nconst Card = ({ orderToBeShipped, shipments, token }) => {\n  // Initial component state\n  console.log(orderToBeShipped[0].sku, orderToBeShipped[0].buyer_name);\n  const [loading, setLoading] = useState(false);\n  const [checked, setChecked] = useState(false);\n  const [checkedShip, setCheckedShip] = useState(false);\n  const [removeShip, setRemoveShip] = useState(false);\n  const [complete, setComplete] = useState(false);\n  const [alreadyPurchased, setAlreadyPurchased] = useState(false);\n  const [preorder, setPreorder] = useState(false);\n  const [cannotProcess, setCannotProcess] = useState(false);\n  const [added, setAdded] = useState(false);\n  const [price, setPrice] = useState(null);\n  const [notificationSent, setNotificationSent] = useState(false);\n\n  const handleClick = () => setChecked(!checked);\n  const handleClickShip = () => {\n    setCheckedShip(!checkedShip);\n    setNotificationSent(true);\n    shipments.data.map(async (shipment) => {\n      if (orderToBeShipped[0].payment_id === Number(shipment.order_id)) {\n        markAsShipped(\n          token,\n          orderToBeShipped[0].payment_id,\n          shipment.tracking_url\n        );\n      }\n    });\n  };\n\n  // custom actions for redux store\n  const add = useStoreActions((actions) => actions.pngs.add);\n  const addInfo = useStoreActions((actions) => actions.pngs.addInfo);\n  const addError = useStoreActions((actions) => actions.errors.add);\n\n  // A small piece of UI to render the individual items from an order\n  // Highlight the amount if quantity is more than 1 of a single thing.\n  const items = orderToBeShipped.map((item) => {\n    return (\n      <li key={item.sale_item_id}>\n        <span className={`${item.quantity > 1 ? \"highlight\" : \"\"} quantity`}>\n          {item.quantity}\n        </span>\n        {item.item_name}\n      </li>\n    );\n  });\n\n  const createShipmentFunc = async (orderToBeShipped) => {\n    // Create the shipment based on information from bandcamp.\n    const shipment = await createShipment(orderToBeShipped);\n    // Handle errors during shipment creation, if chitchats errors\n    // We add the error to the store and update UI based on setCannotProcess\n    if (shipment === \"Something went wrong\" || shipment === undefined) {\n      addError(\"Error\");\n      setCannotProcess(true);\n    } else {\n      setLoading(true);\n      const shipmentBought = await buyShipment(shipment.id);\n      if (shipmentBought) {\n        // When we get the shipment after purchase so soon, the postage_label_png_url value is null\n        // We need to give chitchats time on their end to create that postage label and add it to the response object.\n        // To avoid calling the api over and over until its there, for now i'm just using a setTimeout.\n        setTimeout(async () => {\n          const getShipmentInfo = await getShipment(shipment.id);\n          setLoading(false);\n          add(getShipmentInfo.data.shipment.postage_label_png_url);\n          addInfo(orderToBeShipped);\n          setComplete(true);\n        }, 5000);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Go through all shipments on initial load and update state/render appropriate ui.\n    if (shipments) {\n      shipments.data.map((test) => {\n        if (\n          parseInt(test.order_id) === orderToBeShipped[0].payment_id &&\n          (test.status === \"ready\" ||\n            test.status === \"exception\" ||\n            test.status === \"received\" ||\n            test.status === \"delivered\" ||\n            test.status === \"inducted\")\n        ) {\n          setPrice(test.purchase_amount);\n          setAlreadyPurchased(true);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    // TODO: Create UI based on whether or not an item is a pre-order.\n    orderToBeShipped.map((item) => {\n      if (item.sku.includes(\"PO\")) {\n        setPreorder(true);\n      }\n    });\n\n    // if individual card is checked, shipment is created\n    if (checked) {\n      createShipmentFunc(orderToBeShipped);\n    }\n    // Once shipment is purchased, if shipment checkbox is selected, order will be marked as shipped in bandcamp DB\n    // and customer will get a confirmation email with tracking URL for their package.\n    if (checkedShip) {\n      shipments.data.map(async (shipment) => {\n        if (orderToBeShipped[0].payment_id === shipment.order_id) {\n          // markAsShipped(\n          //   token,\n          //   orderToBeShipped[0].payment_id,\n          //   shipment.tracking_url\n          // );\n        }\n      });\n    }\n  }, [checked, checkedShip]);\n\n  // TODO: Create UI based on whether or not an item is a pre-order.\n  // if(preorder) {\n  //   return (\n  //       <div key={orderToBeShipped[0].sale_item_id} className={`order blankOut`}>\n  //         <span className=\"date\">{orderToBeShipped[0].order_date.substring(0, orderToBeShipped[0].order_date.length - 12)}</span>\n  //         <p>Name: {orderToBeShipped[0].ship_to_name}</p>\n  //         <p>Country: {orderToBeShipped[0].ship_to_country}</p>\n  //         <div className=\"flexContainer\">\n  //           <p>Items</p>\n  //           <ul>{item}</ul>\n  //         </div>\n  //         <div className=\"individualShip\">\n  //         <>\n  //             <p className=\"tinyText\">Process Individual Shipment</p>\n  //             <input\n  //               className=\"checkbox\"\n  //               onClick={handleClick}\n  //               onChange={() => (confirmCreateShipment = true)}\n  //               checked={checked}\n  //               type=\"checkbox\"\n  //             />\n  //         </>\n  //       </div>\n  //       </div>\n  //     );\n  // }\n\n  if (notificationSent) {\n    return (\n      <div key={orderToBeShipped[0].sale_item_id} className={`order note-sent`}>\n        <div>\n          <span className=\"date\">\n            <div>\n              {orderToBeShipped[0].order_date.substring(\n                0,\n                orderToBeShipped[0].order_date.length - 12\n              )}\n            </div>\n            {orderToBeShipped[0].paypal_id ===\n              \"collected to cover your revenue share balance\"}\n          </span>\n        </div>\n        <div>\n          <p>{orderToBeShipped[0].ship_to_name}</p>\n          <p>{orderToBeShipped[0].ship_to_country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded opacity\">Purchased</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded button-proc\">NOTE SENT</button>\n        </div>\n      </div>\n    );\n  }\n\n  // Loading state\n  if (loading) {\n    return (\n      <div\n        key={orderToBeShipped[0].sale_item_id}\n        className={`order processing`}\n      >\n        <div>\n          <span className=\"date\">\n            <div>\n              {orderToBeShipped[0].order_date.substring(\n                0,\n                orderToBeShipped[0].order_date.length - 12\n              )}\n            </div>\n            {orderToBeShipped[0].paypal_id ===\n              \"collected to cover your revenue share balance\"}\n          </span>\n        </div>\n        <div>\n          <p>{orderToBeShipped[0].ship_to_name}</p>\n          <p>{orderToBeShipped[0].ship_to_country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded button-proc\">Processing</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded opacity\">Mark Shipped</button>\n        </div>\n      </div>\n    );\n  }\n\n  // This is what renders if a shipment cannot be created/errors during shipment creation.\n  if (cannotProcess) {\n    return (\n      <div\n        key={orderToBeShipped[0].sale_item_id}\n        className={`order manualComplete`}\n      >\n        <span className=\"date\">\n          <div>\n            {orderToBeShipped[0].order_date.substring(\n              0,\n              orderToBeShipped[0].order_date.length - 12\n            )}\n          </div>\n          {orderToBeShipped[0].paypal_id ===\n            \"collected to cover your revenue share balance\"}\n        </span>\n        <div>\n          <p>{orderToBeShipped[0].ship_to_name}</p>\n          <p>{orderToBeShipped[0].ship_to_country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded error-btn\">ERROR</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded opacity\">Mark Shipped</button>\n        </div>\n      </div>\n    );\n  }\n\n  // This is what renders if a shipment has already been created/purchased\n  // if (alreadyPurchased) {\n  //   return (\n  //     <div key={orderToBeShipped[0].sale_item_id} className={`order completeOrder`}>\n  //       <span className=\"date\">{orderToBeShipped[0].order_date.substring(0, orderToBeShipped[0].order_date.length - 12)}</span>\n  //       <div>\n  //         <p>{orderToBeShipped[0].ship_to_name}</p>\n  //         <p>{orderToBeShipped[0].ship_to_country}</p>\n  //       </div>\n  //       <div className=\"flexContainer\">\n  //         <ul>{items}</ul>\n  //       </div>\n  //       <div className=\"buttons\">\n  //         <button className=\"buttonRounded opacity\">Purchased</button>\n  // <button\n  //   className=\"buttonRounded reprint\"\n  //   disabled={added}\n  //   onClick={() => {\n  //     shipments.data.map(async (ship) => {\n  //       // If the order id matches the payment id we have our shipment.\n  //       if (parseInt(ship.order_id) === orderToBeShipped[0].payment_id) {\n  //         const getShipmentInfo = await getShipment(ship.id);\n  //         if (getShipmentInfo.data.shipment.status === \"ready\") {\n  //           // Update the store with the information for the shipment we want to print the label of.\n  //           add(getShipmentInfo.data.shipment.postage_label_png_url);\n  //           addInfo(orderToBeShipped);\n  //           setAdded(true);\n  //         }\n  //       }\n  //     });\n  //   }}\n  // >\n  //   {!added ? \"Reprint label\" : \"Added\"}\n  // </button>\n  //         {!removeShip && (\n  //           <button className=\"buttonRounded shipped\" onClick={handleClickShip}>\n  //             Mark Shipped\n  //           </button>\n  //         )}\n  //       </div>\n  //     </div>\n  //   );\n  // }\n\n  // Default UI for cards\n  // console.log(orderToBeShipped[0].ship_notes);\n  return (\n    <div\n      style={{\n        display: orderToBeShipped[0].ship_notes === \"HIDDEN\" ? \"none\" : \"\",\n      }}\n      key={orderToBeShipped[0].sale_item_id}\n      className={`order ${alreadyPurchased && \"completeOrder\"} ${\n        complete ? \"complete\" : \"\"\n      } ${checked ? \"pdfReady\" : \"\"} ${preorder ? \"blankOut\" : \"\"}`}\n    >\n      <span className=\"date\">\n        <div>\n          {orderToBeShipped[0].order_date.substring(\n            0,\n            orderToBeShipped[0].order_date.length - 12\n          )}\n        </div>\n        {orderToBeShipped[0].paypal_id ===\n        \"collected to cover your revenue share balance\"\n          ? \"Unavailable\"\n          : orderToBeShipped[0].paypal_id}\n      </span>\n      {alreadyPurchased && price !== null ? <div>${price}</div> : <div>-</div>}\n      <div className=\"name\">\n        <p>{orderToBeShipped[0].ship_to_name}</p>\n        <p>{orderToBeShipped[0].ship_to_country}</p>\n      </div>\n      <div className=\"flexContainer\">\n        <ul>{items}</ul>\n      </div>\n      <div className=\"buttons\">\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"opacity\" : \"purchase\"\n          }`}\n          onClick={() => handleClick()}\n        >\n          {alreadyPurchased ? \"Purchased\" : \"Purchase Postage\"}\n        </button>\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"reprint\" : \"opacity\"\n          }`}\n          disabled={added}\n          onClick={() => {\n            shipments.data.map(async (ship) => {\n              // If the order id matches the payment id we have our shipment.\n              console.log(ship);\n              if (\n                parseInt(ship.order_id) === orderToBeShipped[0].payment_id &&\n                (ship.status === \"ready\" || ship.status === \"inducted\")\n              ) {\n                const getShipmentInfo = await getShipment(ship.id);\n                // if (getShipmentInfo.data.shipment.status === \"ready\") {\n                // Update the store with the information for the shipment we want to print the label of.\n                add(getShipmentInfo.data.shipment.postage_label_png_url);\n                addInfo(orderToBeShipped);\n                setAdded(true);\n                // }\n              }\n            });\n          }}\n        >\n          {!added ? \"Reprint label\" : \"Added\"}\n        </button>\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"shipped\" : \"opacity\"\n          }`}\n          onClick={() => handleClickShip()}\n        >\n          Mark Shipped\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/PdfGenerator.js",["79","80"],"import React from \"react\";\nimport {\n  Page,\n  Text,\n  View,\n  Document,\n  StyleSheet,\n  Image,\n  PDFDownloadLink,\n  Font,\n} from \"@react-pdf/renderer\";\n\nconst PdfGenerator = ({ errors, urls, info }) => {\n  // This component handles generation and download of pdfs/shipping slabels\n  info.map((order, i) => {\n    order.url = urls[i];\n  });\n\n  const PdfIdee = () => {\n    return (\n      <Document>\n        {info.map((order, i) => {\n          return (\n            <Page style={styles.body}>\n              <Image\n                style={styles.image}\n                src={`https://cors-anywhere.herokuapp.com/${order.url}`}\n              />\n              <Text style={styles.title}>Packing List</Text>\n              {order.purchasedItems\n                ? order.purchasedItems.map((item) => {\n                    if (item.count > 1) {\n                      return (\n                        <Text style={styles.highlight}>{`Quanity: ${\n                          item.count\n                        }, Item: ${item.variantName.replace(\n                          \"Physical:\",\n                          \"\"\n                        )}`}</Text>\n                      );\n                    } else {\n                      return (\n                        <Text style={styles.text}>{`Quanity: ${\n                          item.count\n                        }, Item: ${item.variantName.replace(\n                          \"Physical:\",\n                          \"\"\n                        )}`}</Text>\n                      );\n                    }\n                  })\n                : order.map((item) => {\n                    if (item.quantity > 1) {\n                      return (\n                        <Text style={styles.highlight}>{`Quanity: ${\n                          item.quantity\n                        }, Item: ${item.option !== null ? item.option : \"\"} - ${\n                          item.item_name\n                        }`}</Text>\n                      );\n                    } else {\n                      return (\n                        <Text style={styles.text}>{`Quanity: ${\n                          item.quantity\n                        }, Item:  ${\n                          item.option !== null ? item.option : \"\"\n                        } - ${item.item_name}`}</Text>\n                      );\n                    }\n                  })}\n            </Page>\n          );\n        })}\n      </Document>\n    );\n  };\n\n  Font.register({\n    family: \"Oswald\",\n    src: \"https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf\",\n  });\n\n  const styles = StyleSheet.create({\n    body: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      paddingHorizontal: 0,\n      paddingVertical: 0,\n    },\n    title: {\n      fontSize: 24,\n      textAlign: \"center\",\n      fontFamily: \"Oswald\",\n      marginBottom: 10,\n      marginTop: 100,\n    },\n    highlight: {\n      backgroundColor: \"yellow\",\n      color: \"red\",\n      fontSize: 12,\n      textAlign: \"center\",\n      marginBottom: 10,\n    },\n    text: {\n      fontSize: 12,\n      textAlign: \"center\",\n      marginBottom: 10,\n      width: \"80%\",\n      marginHorizontal: \"auto\",\n    },\n    image: {\n      marginVertical: -5,\n      marginHorizontal: 150,\n      transform: \"rotate(90deg)\",\n      height: 500,\n      width: 300,\n    },\n  });\n  const todayDate = new Date().toISOString().slice(0, 10);\n\n  return (\n    <>\n      <PDFDownloadLink document={<PdfIdee />} fileName={`${todayDate}.pdf`}>\n        {({ blob, url, loading, error }) =>\n          loading ? \"Loading...\" : \"Download\"\n        }\n      </PDFDownloadLink>\n      <div className=\"errors\">Errors: {errors.length}</div>\n    </>\n  );\n};\n\nexport default PdfGenerator;\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/axios.js",[],"/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/webflow.js",["81"],"import axios from \"axios\";\n\nexport const getOrdersUnshippedWebflow = async () => {\n  const response = await axios.get(\n    \"https://cors-anywhere.herokuapp.com/https://api.webflow.com/sites/5fd7cabbf4d7129fb098a4db/orders?access_token=d6d489cda5a6d6c1b769ac8faf0e47ed66ef8ac3546962f2e859bc69800700f3\"\n  );\n  const unfulfilled = await response.data.filter(\n    (order) => order.status === \"unfulfilled\"\n  );\n  return unfulfilled;\n};\n\nexport const markAsShippedWebflow = async (orderId, trackingUrl, url) => {\n  try {\n    const params = {\n      sendOrderFulfilledEmail: true,\n    };\n    console.log(url);\n\n    let headers = new Headers();\n\n    headers.append(\"Content-Type\", \"application/json\");\n    headers.append(\"Accept\", \"application/json\");\n    headers.append(\n      \"Authorization\",\n      \"Bearer \" +\n        \"d6d489cda5a6d6c1b769ac8faf0e47ed66ef8ac3546962f2e859bc69800700f3\"\n    );\n    headers.append(\"Origin\", \"http://localhost:3000\");\n\n    fetch(url, {\n      mode: \"no-cors\",\n      credentials: \"include\",\n      method: \"POST\",\n      headers: headers,\n    })\n      .then((response) => response.json())\n      .then((json) => console.log(json))\n      .catch((error) => console.log(\"Authorization failed: \" + error.message));\n    // const url = `https://api.webflow.com/sites/5fd7cabbf4d7129fb098a4db/order/${orderId}/fulfill`;\n    // const fulfillOrder = await axios.post(url, params, { json: true });\n    // return fulfillOrder;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/WebflowCard.js",["82","83","84","85","86","87"],"/* eslint-disable array-callback-return */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\nimport { useStoreActions } from \"easy-peasy\";\nimport {\n  createShipmentWebflow,\n  buyShipment,\n  getShipment,\n} from \"../apis/chitchats\";\nimport { markAsShippedWebflow } from \"../apis/webflow\";\nimport Spinner from \"../logoidee.svg\";\n\nconst WebflowCard = ({ orderToBeShipped, shipments, token }) => {\n  // Initial component state\n  const [loading, setLoading] = useState(false);\n  const [checked, setChecked] = useState(false);\n  const [checkedShip, setCheckedShip] = useState(false);\n  const [removeShip, setRemoveShip] = useState(false);\n  const [complete, setComplete] = useState(false);\n  const [alreadyPurchased, setAlreadyPurchased] = useState(false);\n  const [preorder, setPreorder] = useState(false);\n  const [cannotProcess, setCannotProcess] = useState(false);\n  const [added, setAdded] = useState(false);\n  const [price, setPrice] = useState(null);\n  const [notificationSent, setNotificationSent] = useState(false);\n  const [tracking, setTracking] = useState(\"\");\n\n  const handleClick = () => setChecked(!checked);\n  const handleClickShip = () => {\n    setCheckedShip(!checkedShip);\n    setNotificationSent(true);\n    shipments.data.map(async (shipment) => {\n      if (shipment.order_id === orderToBeShipped.orderId) {\n        const url = `https://cors-anywhere.herokuapp.com/https://api.webflow.com/sites/5fd7cabbf4d7129fb098a4db/order/${orderToBeShipped.orderId}/fulfill?access_token=d6d489cda5a6d6c1b769ac8faf0e47ed66ef8ac3546962f2e859bc69800700f3`;\n        markAsShippedWebflow(\n          orderToBeShipped.orderId,\n          shipment.tracking_url,\n          url\n        );\n      }\n    });\n  };\n\n  // custom actions for redux store\n  const add = useStoreActions((actions) => actions.webflowPngs.add);\n  const addInfo = useStoreActions((actions) => actions.webflowPngs.addInfo);\n  const addError = useStoreActions((actions) => actions.errors.add);\n\n  // A small piece of UI to render the individual items from an order\n  // Highlight the amount if quantity is more than 1 of a single thing.\n  const items = orderToBeShipped.purchasedItems.map((item) => {\n    return (\n      <li key={orderToBeShipped.orderId}>\n        <span className={`${item.count > 1 ? \"highlight\" : \"\"} quantity`}>\n          {item.count}\n        </span>\n        {item.variantName.replace(\"Physical:\", \"\")}\n      </li>\n    );\n  });\n\n  const createShipmentFunc = async (orderToBeShipped) => {\n    // Create the shipment based on information from bandcamp.\n    const shipment = await createShipmentWebflow(orderToBeShipped);\n    // Handle errors during shipment creation, if chitchats errors\n    // We add the error to the store and update UI based on setCannotProcess\n    if (shipment === \"Something went wrong\" || shipment === undefined) {\n      addError(\"Error\");\n      setCannotProcess(true);\n    } else {\n      setLoading(true);\n      const shipmentBought = await buyShipment(shipment.id);\n      if (shipmentBought) {\n        // When we get the shipment after purchase so soon, the postage_label_png_url value is null\n        // We need to give chitchats time on their end to create that postage label and add it to the response object.\n        // To avoid calling the api over and over until its there, for now i'm just using a setTimeout.\n        setTimeout(async () => {\n          const getShipmentInfo = await getShipment(shipment.id);\n          setLoading(false);\n          add(getShipmentInfo.data.shipment.postage_label_png_url);\n          addInfo(orderToBeShipped);\n          setComplete(true);\n        }, 5000);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Go through all shipments on initial load and update state/render appropriate ui.\n    if (shipments) {\n      shipments.data.map((test) => {\n        // console.log(test, orderToBeShipped[0].payment_id);\n        // if (\n        //   parseInt(test.order_id) === orderToBeShipped[0].payment_id &&\n        //   (test.status === \"ready\" ||\n        //     test.status === \"exception\" ||\n        //     test.status === \"received\" ||\n        //     test.status === \"delivered\" ||\n        //     test.status === \"inducted\")\n        // ) {\n        //   setPrice(test.purchase_amount);\n        //   setTracking(test.tracking_url);\n        //   setAlreadyPurchased(true);\n        // }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    // TODO: Create UI based on whether or not an item is a pre-order.\n    orderToBeShipped.purchasedItems.map((item) => {\n      console.log(item, \"VARIANTSKU WEB\");\n      if (item.variantSKU !== null && item.variantSKU.includes(\"PO\")) {\n        setPreorder(true);\n      }\n    });\n    // if individual card is checked, shipment is created\n    if (checked) {\n      createShipmentFunc(orderToBeShipped);\n    }\n    // Once shipment is purchased, if shipment checkbox is selected, order will be marked as shipped in bandcamp DB\n    // and customer will get a confirmation email with tracking URL for their package.\n    // if (checkedShip) {\n    //   shipments.data.map(async (shipment) => {\n    //     if (orderToBeShipped[0].payment_id === shipment.order_id) {\n    //       console.log(\"IT IS SHIPPER\");\n    //       // markAsShipped(\n    //       //   token,\n    //       //   orderToBeShipped[0].payment_id,\n    //       //   shipment.tracking_url\n    //       // );\n    //     }\n    //   });\n    // }\n  }, [checked, checkedShip]);\n\n  if (notificationSent) {\n    return (\n      <div key={orderToBeShipped.orderId} className={`order note-sent`}>\n        <div>\n          <span className=\"date\">\n            <div>\n              {orderToBeShipped.acceptedOn.substring(\n                0,\n                orderToBeShipped.acceptedOn.length - 14\n              )}\n            </div>\n            {orderToBeShipped.orderId}\n            {tracking !== \"\" && (\n              <a href={tracking} target=\"_blank\" rel=\"noreferrer\">\n                Tracking Url\n              </a>\n            )}\n          </span>\n        </div>\n        <div>\n          <p>{orderToBeShipped.customerInfo.fullName}</p>\n          <p>{orderToBeShipped.billingAddress.country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded opacity\">Purchased</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded button-proc\">NOTE SENT</button>\n        </div>\n      </div>\n    );\n  }\n\n  // Loading state\n  if (loading) {\n    return (\n      <div key={orderToBeShipped.orderId} className={`order processing`}>\n        <div>\n          <span className=\"date\">\n            <div>\n              {orderToBeShipped.acceptedOn.substring(\n                0,\n                orderToBeShipped.acceptedOn.length - 14\n              )}\n            </div>\n            {orderToBeShipped.orderId}\n          </span>\n        </div>\n        <div>\n          <p>{orderToBeShipped.customerInfo.fullName}</p>\n          <p>{orderToBeShipped.billingAddress.country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded button-proc\">Processing</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded opacity\">Mark Shipped</button>\n        </div>\n      </div>\n    );\n  }\n\n  // This is what renders if a shipment cannot be created/errors during shipment creation.\n  if (cannotProcess) {\n    return (\n      <div key={orderToBeShipped.orderId} className={`order manualComplete`}>\n        <span className=\"date\">\n          <div>\n            {orderToBeShipped.acceptedOn.substring(\n              0,\n              orderToBeShipped.acceptedOn.length - 14\n            )}\n          </div>\n          {orderToBeShipped.orderId}\n        </span>\n        <div>\n          <p>{orderToBeShipped.customerInfo.fullName}</p>\n          <p>{orderToBeShipped.billingAddress.country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded error-btn\">ERROR</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded opacity\">Mark Shipped</button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      key={orderToBeShipped.orderId}\n      className={`order ${alreadyPurchased && \"completeOrder\"} ${\n        complete ? \"complete\" : \"\"\n      } ${checked ? \"pdfReady\" : \"\"} ${preorder ? \"blankOut\" : \"\"}`}\n    >\n      <span className=\"date\">\n        <div>\n          {orderToBeShipped.acceptedOn.substring(\n            0,\n            orderToBeShipped.acceptedOn.length - 14\n          )}\n        </div>\n        {orderToBeShipped.orderId}\n        {tracking !== \"\" && (\n          <a href={tracking} target=\"_blank\" rel=\"noreferrer\">\n            Tracking Url\n          </a>\n        )}\n      </span>\n      {alreadyPurchased && price !== null ? <div>${price}</div> : <div>-</div>}\n      <div className=\"name\">\n        <p>{orderToBeShipped.customerInfo.fullName}</p>\n        <p>{orderToBeShipped.billingAddress.country}</p>\n      </div>\n      <div className=\"flexContainer\">\n        <ul>{items}</ul>\n      </div>\n      <div className=\"buttons\">\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"opacity\" : \"purchase\"\n          }`}\n          onClick={() => handleClick()}\n        >\n          {alreadyPurchased ? \"Purchased\" : \"Purchase Postage\"}\n        </button>\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"reprint\" : \"opacity\"\n          }`}\n          disabled={added}\n          onClick={() => {\n            shipments.data.map(async (ship) => {\n              // If the order id matches the payment id we have our shipment.\n              if (\n                ship.order_id === orderToBeShipped.orderId &&\n                ship.status === \"ready\"\n              ) {\n                const getShipmentInfo = await getShipment(ship.id);\n                // if (getShipmentInfo.data.shipment.status === \"ready\") {\n                // Update the store with the information for the shipment we want to print the label of.\n                add(getShipmentInfo.data.shipment.postage_label_png_url);\n                addInfo(orderToBeShipped);\n                setAdded(true);\n                // }\n              }\n            });\n          }}\n        >\n          {!added ? \"Reprint label\" : \"Added\"}\n        </button>\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"shipped\" : \"opacity\"\n          }`}\n          onClick={() => handleClickShip()}\n        >\n          Mark Shipped\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default WebflowCard;\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/PdfGeneratorWebflow.js",["88","89","90","91"],"import React, { useEffect } from \"react\";\nimport {\n  Page,\n  Text,\n  View,\n  Document,\n  StyleSheet,\n  Image,\n  PDFDownloadLink,\n  Font,\n} from \"@react-pdf/renderer\";\nimport logo from \"../logo.svg\";\n\nconst PdfGeneratorWebflow = ({ errors, urls, info }) => {\n  info.map((order, i) => {\n    order.url = urls[i];\n  });\n\n  const PdfIdee = () => {\n    return (\n      <Document>\n        {info.map((order, i) => {\n          return (\n            <Page style={styles.body}>\n              <Image style={styles.image} src={order.url} />\n              <Text style={styles.title}>Packing List</Text>\n              {order.purchasedItems.map((item) => {\n                if (item.count > 1) {\n                  return (\n                    <Text\n                      style={styles.highlight}\n                    >{`Quanity: ${item.count}, Item: ${item.productName}`}</Text>\n                  );\n                } else {\n                  return (\n                    <Text\n                      style={styles.text}\n                    >{`Quanity: ${item.count}, Item: ${item.productName}`}</Text>\n                  );\n                }\n              })}\n            </Page>\n          );\n        })}\n      </Document>\n    );\n  };\n\n  Font.register({\n    family: \"Oswald\",\n    src: \"https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf\",\n  });\n\n  const styles = StyleSheet.create({\n    body: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      paddingHorizontal: 0,\n      paddingVertical: 0,\n    },\n    title: {\n      fontSize: 24,\n      textAlign: \"center\",\n      fontFamily: \"Oswald\",\n      marginBottom: 10,\n      marginTop: 100,\n    },\n    highlight: {\n      backgroundColor: \"yellow\",\n      color: \"red\",\n      fontSize: 12,\n      textAlign: \"center\",\n      marginBottom: 10,\n    },\n    text: {\n      fontSize: 12,\n      textAlign: \"center\",\n      marginBottom: 10,\n      width: \"80%\",\n      marginHorizontal: \"auto\",\n    },\n    image: {\n      marginVertical: -5,\n      marginHorizontal: 150,\n      transform: \"rotate(90deg)\",\n      height: 500,\n      width: 300,\n    },\n  });\n  const todayDate = new Date().toISOString().slice(0, 10);\n\n  return (\n    <>\n      <PDFDownloadLink document={<PdfIdee />} fileName={`${todayDate}.pdf`}>\n        {({ blob, url, loading, error }) =>\n          loading ? \"Loading document...\" : \"Download now!\"\n        }\n      </PDFDownloadLink>\n      <div className=\"errors\">Errors: {errors.length}</div>\n    </>\n  );\n};\n\nexport default PdfGeneratorWebflow;\n",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":13},{"ruleId":"96","severity":1,"message":"100","line":31,"column":10,"nodeType":"98","messageId":"99","endLine":31,"endColumn":23},{"ruleId":"96","severity":1,"message":"101","line":31,"column":25,"nodeType":"98","messageId":"99","endLine":31,"endColumn":41},{"ruleId":"102","severity":1,"message":"103","line":228,"column":58,"nodeType":"104","messageId":"105","endLine":228,"endColumn":60},{"ruleId":"96","severity":1,"message":"106","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":27},{"ruleId":"102","severity":1,"message":"103","line":36,"column":54,"nodeType":"104","messageId":"105","endLine":36,"endColumn":56},{"ruleId":"96","severity":1,"message":"107","line":107,"column":11,"nodeType":"98","messageId":"99","endLine":107,"endColumn":17},{"ruleId":"102","severity":1,"message":"108","line":133,"column":36,"nodeType":"104","messageId":"109","endLine":133,"endColumn":38},{"ruleId":"96","severity":1,"message":"110","line":154,"column":9,"nodeType":"98","messageId":"99","endLine":154,"endColumn":21},{"ruleId":"102","severity":1,"message":"103","line":299,"column":68,"nodeType":"104","messageId":"105","endLine":299,"endColumn":70},{"ruleId":"96","severity":1,"message":"107","line":368,"column":11,"nodeType":"98","messageId":"99","endLine":368,"endColumn":17},{"ruleId":"102","severity":1,"message":"108","line":396,"column":50,"nodeType":"104","messageId":"109","endLine":396,"endColumn":52},{"ruleId":"96","severity":1,"message":"111","line":7,"column":8,"nodeType":"98","messageId":"99","endLine":7,"endColumn":15},{"ruleId":"96","severity":1,"message":"112","line":15,"column":10,"nodeType":"98","messageId":"99","endLine":15,"endColumn":20},{"ruleId":"96","severity":1,"message":"113","line":15,"column":22,"nodeType":"98","messageId":"99","endLine":15,"endColumn":35},{"ruleId":"96","severity":1,"message":"114","line":5,"column":3,"nodeType":"98","messageId":"99","endLine":5,"endColumn":7},{"ruleId":"102","severity":1,"message":"108","line":15,"column":23,"nodeType":"104","messageId":"109","endLine":15,"endColumn":25},{"ruleId":"96","severity":1,"message":"115","line":15,"column":11,"nodeType":"98","messageId":"99","endLine":15,"endColumn":17},{"ruleId":"96","severity":1,"message":"111","line":11,"column":8,"nodeType":"98","messageId":"99","endLine":11,"endColumn":15},{"ruleId":"96","severity":1,"message":"112","line":18,"column":10,"nodeType":"98","messageId":"99","endLine":18,"endColumn":20},{"ruleId":"96","severity":1,"message":"113","line":18,"column":22,"nodeType":"98","messageId":"99","endLine":18,"endColumn":35},{"ruleId":"96","severity":1,"message":"116","line":20,"column":28,"nodeType":"98","messageId":"99","endLine":20,"endColumn":47},{"ruleId":"96","severity":1,"message":"117","line":24,"column":17,"nodeType":"98","messageId":"99","endLine":24,"endColumn":25},{"ruleId":"96","severity":1,"message":"118","line":26,"column":20,"nodeType":"98","messageId":"99","endLine":26,"endColumn":31},{"ruleId":"96","severity":1,"message":"119","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":26},{"ruleId":"96","severity":1,"message":"114","line":5,"column":3,"nodeType":"98","messageId":"99","endLine":5,"endColumn":7},{"ruleId":"96","severity":1,"message":"120","line":12,"column":8,"nodeType":"98","messageId":"99","endLine":12,"endColumn":12},{"ruleId":"102","severity":1,"message":"108","line":15,"column":23,"nodeType":"104","messageId":"109","endLine":15,"endColumn":25},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'bandcampError' is assigned a value but never used.","'setBandcampError' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'PdfGeneratorWebflow' is defined but never used.","'amount' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'shipmentBody' is assigned a value but never used.","'Spinner' is defined but never used.","'removeShip' is assigned a value but never used.","'setRemoveShip' is assigned a value but never used.","'View' is defined but never used.","'params' is assigned a value but never used.","'setAlreadyPurchased' is assigned a value but never used.","'setPrice' is assigned a value but never used.","'setTracking' is assigned a value but never used.","'useEffect' is defined but never used.","'logo' is defined but never used.","no-global-assign","no-unsafe-negation"]