[{"/Users/braedencraig/Desktop/idee-swyft-updates/src/index.js":"1","/Users/braedencraig/Desktop/idee-swyft-updates/src/reportWebVitals.js":"2","/Users/braedencraig/Desktop/idee-swyft-updates/src/App.js":"3","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Button.js":"4","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Nav.js":"5","/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/bandcamp.js":"6","/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/chitchats.js":"7","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Card.js":"8","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/PdfGenerator.js":"9","/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/axios.js":"10","/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/webflow.js":"11","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/WebflowCard.js":"12","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/PdfGeneratorWebflow.js":"13"},{"size":500,"mtime":1616959796000,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1606789933000,"results":"16","hashOfConfig":"15"},{"size":9229,"mtime":1680911988361,"results":"17","hashOfConfig":"15"},{"size":1423,"mtime":1666230814055,"results":"18","hashOfConfig":"15"},{"size":214,"mtime":1659362913000,"results":"19","hashOfConfig":"15"},{"size":3774,"mtime":1666055603554,"results":"20","hashOfConfig":"15"},{"size":12647,"mtime":1666820024788,"results":"21","hashOfConfig":"15"},{"size":13442,"mtime":1674923179124,"results":"22","hashOfConfig":"15"},{"size":3586,"mtime":1666818611035,"results":"23","hashOfConfig":"15"},{"size":852,"mtime":1666240599930,"results":"24","hashOfConfig":"15"},{"size":1450,"mtime":1666238614946,"results":"25","hashOfConfig":"15"},{"size":10842,"mtime":1674925652083,"results":"26","hashOfConfig":"15"},{"size":2485,"mtime":1666222186449,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"yvme9g",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},"/Users/braedencraig/Desktop/idee-swyft-updates/src/index.js",[],["62","63"],"/Users/braedencraig/Desktop/idee-swyft-updates/src/reportWebVitals.js",[],"/Users/braedencraig/Desktop/idee-swyft-updates/src/App.js",["64","65"],"/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Button.js",["66"],"import React, { useState } from \"react\";\nimport { useStoreState } from \"easy-peasy\";\nimport PdfGenerator from \"../components/PdfGenerator\";\nimport PdfGeneratorWebflow from \"../components/PdfGeneratorWebflow\";\n\nconst Button = () => {\n  // Initial state\n  const [confirm, setConfirm] = useState(false);\n\n  // Data from store for shipping image urls and info.\n  let urls = useStoreState((state) => state.pngs.urls);\n  let info = useStoreState((state) => state.pngs.info);\n\n  let webflowurls = useStoreState((state) => state.webflowPngs.urls);\n  let webflowinfo = useStoreState((state) => state.webflowPngs.info);\n\n  let errors = useStoreState((state) => state.errors.items);\n\n  const masterUrls = [...urls, ...webflowurls];\n  const masterInfo = [...info, ...webflowinfo];\n\n  return (\n    <div\n      className={`pdfGeneration ${\n        masterUrls.length === 0 ? \"pdfGenerationDisabled\" : \"\"\n      }`}\n    >\n      <button\n        className=\"buttonRounded\"\n        onClick={() => {\n          // On click we render the PdfGenerator\n          setConfirm(true);\n        }}\n      >\n        Generate Labels\n      </button>\n      {confirm && (\n        <PdfGenerator errors={errors} urls={masterUrls} info={masterInfo} />\n      )}\n      {/* {confirm && (\n        <PdfGeneratorWebflow\n          errors={errors}\n          urls={webflowurls}\n          info={webflowinfo}\n        />\n      )} */}\n    </div>\n  );\n};\n\nexport default Button;\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Nav.js",[],"/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/bandcamp.js",[],"/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/chitchats.js",["67","68","69","70","71","72"],"import axios from \"axios\";\nimport axiosWithDelimiterFile from \"../apis/axios\";\n\nconst chitChatTkn = process.env.REACT_APP_CHITCHATS_API_SECRET;\nconst chitChatClientId = process.env.REACT_APP_CHITCHATS_API_CLIENT_ID;\n\nexport const createShipment = async (orderToBeShipped) => {\n  try {\n    let postageType = () => {\n      if (\n        orderToBeShipped[0].ship_to_country_code === \"SI\" ||\n        orderToBeShipped[0].ship_to_country_code === \"HR\" ||\n        orderToBeShipped[0].ship_to_country_code === \"GR\"\n      ) {\n        return \"usps_first_class_package_international_service\";\n      } else if (orderToBeShipped[0].ship_to_country_code === \"DE\") {\n        return \"asendia_priority_tracked\";\n      } else if (orderToBeShipped[0].ship_to_country_code === \"CA\") {\n        return \"chit_chats_canada_tracked\";\n      } else if (orderToBeShipped[0].ship_to_country_code === \"US\") {\n        return \"usps_media_mail\";\n      } else {\n        return \"chit_chats_international_tracked\";\n      }\n    };\n\n    let postage = postageType();\n\n    let tshirt = false;\n    let vinyl = false;\n    let cassette = false;\n    let sizeX;\n    let sizeY;\n    let sizeZ;\n\n    const description = orderToBeShipped.map((order) => {\n      // if (order.item_name.indexOf(\"Vinyl\") > -1) {\n      //     vinyl = true;\n      // } else if (order.item_name.indexOf(\"T-Shirt\") > -1 || order.item_name.indexOf(\"T-shirt\") > -1) {\n      //     tshirt = true;\n      // } else if (order.item_name.indexOf(\"Cassette\") > -1) {\n      //     cassette = true;\n      // }\n\n      if (order.sku.indexOf(\"LP\") > -1) {\n        vinyl = true;\n      } else if (\n        order.item_name.indexOf(\"T-Shirt\") > -1 ||\n        order.item_name.indexOf(\"T-shirt\") > -1\n      ) {\n        tshirt = true;\n      } else if (order.sku.indexOf(\"CS\") || order.sku.indexOf(\"CD\") > -1) {\n        cassette = true;\n      }\n\n      if (vinyl && tshirt && !cassette) {\n        sizeX = 33;\n        sizeY = 33;\n        sizeZ = 4;\n        return \"Phonographic Record & T-Shirt\";\n      }\n\n      if (vinyl && !tshirt && !cassette) {\n        sizeX = 33;\n        sizeY = 33;\n        sizeZ = 4;\n        return \"Phonographic Record\";\n      }\n\n      if (tshirt && !vinyl && !cassette) {\n        sizeX = 26;\n        sizeY = 34;\n        sizeZ = 4;\n        return \"T-Shirt\";\n      }\n\n      if (!tshirt && !vinyl && cassette) {\n        sizeX = 8;\n        sizeY = 14;\n        sizeZ = 3;\n        return \"Cassette\";\n      }\n\n      if (tshirt && !vinyl && cassette) {\n        sizeX = 33;\n        sizeY = 33;\n        sizeZ = 4;\n        return \"T-Shirt & Cassette\";\n      }\n\n      if (!tshirt && vinyl && cassette) {\n        sizeX = 33;\n        sizeY = 33;\n        sizeZ = 4;\n        return \"Phonographic Record & Cassette\";\n      }\n\n      if (tshirt && vinyl && cassette) {\n        sizeX = 33;\n        sizeY = 33;\n        sizeZ = 4;\n        return \"Phonographic Record & T-Shirt & Cassette\";\n      }\n    });\n\n    let total = 0;\n    const amount = orderToBeShipped.map((order) => (total += order.quantity));\n    const totalAmount = total * 25;\n    // WITH CASSETTE\n    if (cassette && !vinyl && !tshirt) {\n      sizeZ = 3 * orderToBeShipped[0].quantity;\n    }\n    if (cassette && vinyl && total <= 2 && !tshirt) {\n      sizeZ = 4;\n    }\n    if (cassette && vinyl && total > 2) {\n      sizeZ = 13;\n    }\n    // NO CASETTE\n    if (total < 4 && !cassette) {\n      sizeZ = 4;\n    } else if (total >= 4 && total <= 20 && !cassette) {\n      sizeZ = 13;\n    } else if (total > 20 && !cassette) {\n      sizeZ = 27;\n    }\n\n    const weight = () => {\n      let totalWeight = 0;\n      let vinylAmount = 0;\n      let tShirtAmount = 0;\n      let cassetteAmount = 0;\n      orderToBeShipped.map((order) => {\n        if (order.sku.indexOf(\"LP\") > -1) {\n          vinylAmount += order.quantity;\n        } else if (\n          order.item_name.indexOf(\"T-Shirt\") > -1 ||\n          order.item_name.indexOf(\"T-shirt\") > -1\n        ) {\n          tShirtAmount += order.quantity;\n        } else if (order.sku.indexOf(\"CS\") || order.sku.indexOf(\"CD\") > -1) {\n          cassetteAmount += order.quantity;\n        }\n      });\n      if (vinylAmount > 0) {\n        totalWeight += 0.6;\n      }\n      totalWeight += vinylAmount * 0.6;\n      totalWeight += tShirtAmount * 0.23;\n      totalWeight += cassetteAmount * 0.3;\n      return totalWeight;\n    };\n\n    let shipmentBody = {\n      name: orderToBeShipped[0].ship_to_name,\n      address_1: orderToBeShipped[0].ship_to_street,\n      address_2: orderToBeShipped[0].ship_to_street_2,\n      city: orderToBeShipped[0].ship_to_city,\n      province_code: orderToBeShipped[0].ship_to_state,\n      postal_code: orderToBeShipped[0].ship_to_zip,\n      country_code: orderToBeShipped[0].ship_to_country_code,\n      phone: orderToBeShipped[0].buyer_phone,\n      package_contents: \"merchandise\",\n      description: description.slice(-1)[0],\n      value: totalAmount,\n      value_currency: orderToBeShipped[0].currency,\n      order_store: \"other\",\n      order_id: orderToBeShipped[0].payment_id,\n      package_type: \"parcel\",\n      size_x: sizeX,\n      size_y: sizeY,\n      size_z: sizeZ,\n      weight: weight().toFixed(2),\n      size_unit: \"cm\",\n      weight_unit: \"lb\",\n      signature_requested: false,\n      insurance_requested: \"no\",\n      ship_date: \"today\",\n      postage_type: postage,\n    };\n\n    // const res = await axiosWithDelimiterFile.post(`/clients/${chitChatClientId}/shipments`, shipmentBody, {\n    //     headers: {\n    //         Authorization: chitChatTkn,\n    //     },\n    // });\n\n    const res = await axios.post(\n      `/clients/${chitChatClientId}/shipments`,\n      shipmentBody,\n      {\n        headers: {\n          Authorization: chitChatTkn,\n        },\n      }\n    );\n\n    if (res.status === 201) {\n      return {\n        id: res.data.shipment.id,\n        tracking: res.data.shipment.tracking_url,\n        rates: res.data.shipment.rates,\n        name: orderToBeShipped[0].ship_to_name,\n      };\n    } else {\n      return \"Something went wrong\";\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getShipment = async (id) => {\n  try {\n    const res = await axios.get(\n      `/clients/${chitChatClientId}/shipments/${id}`,\n      {\n        headers: {\n          Authorization: chitChatTkn,\n        },\n      }\n    );\n    if (res.status === 200) {\n      return res;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getAllShipments = async () => {\n  try {\n    const res = await axios.get(`/clients/${chitChatClientId}/shipments`, {\n      headers: {\n        Authorization: chitChatTkn,\n      },\n    });\n    if (res.status === 200) {\n      return res;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const buyShipment = async (shipmentId) => {\n  try {\n    const res = await axios.patch(\n      `/clients/${chitChatClientId}/shipments/${shipmentId}/buy`,\n      null,\n      {\n        headers: {\n          Authorization: chitChatTkn,\n        },\n      }\n    );\n    if (res.status === 200) {\n      return true;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const createShipmentWebflow = async (orderToBeShipped) => {\n  try {\n    let postageType = () => {\n      if (\n        orderToBeShipped.shippingAddress.country === \"SI\" ||\n        orderToBeShipped.shippingAddress.country === \"HR\" ||\n        orderToBeShipped.shippingAddress.country === \"GR\"\n      ) {\n        return \"usps_first_class_package_international_service\";\n      } else if (orderToBeShipped.shippingAddress.country === \"DE\") {\n        return \"asendia_priority_tracked\";\n      } else if (orderToBeShipped.shippingAddress.country === \"CA\") {\n        return \"chit_chats_canada_tracked\";\n      } else if (orderToBeShipped.shippingAddress.country === \"US\") {\n        return \"usps_media_mail\";\n      } else {\n        return \"chit_chats_international_tracked\";\n      }\n    };\n\n    let postage = postageType();\n\n    let tshirt = false;\n    let vinyl = false;\n    let cassette = false;\n    let sizeX;\n    let sizeY;\n    let sizeZ;\n\n    const description = orderToBeShipped.purchasedItems.map((item) => {\n      if (\n        item.variantSlug.indexOf(\"lp\") > -1 ||\n        item.variantSKU.indexOf(\"LP\") > -1\n      ) {\n        vinyl = true;\n      } else if (\n        item.variantSlug.indexOf(\"ts\") > -1 ||\n        item.variantSKU.indexOf(\"TS\") > -1\n      ) {\n        tshirt = true;\n      } else if (\n        item.variantSlug.indexOf(\"cs\") > -1 ||\n        item.variantSKU.indexOf(\"CS\") > -1\n      ) {\n        cassette = true;\n      }\n\n      if (vinyl && tshirt && !cassette) {\n        sizeX = 33;\n        sizeY = 33;\n        sizeZ = 4;\n        return \"Phonographic Record & T-Shirt\";\n      }\n\n      if (vinyl && !tshirt && !cassette) {\n        sizeX = 33;\n        sizeY = 33;\n        sizeZ = 4;\n        return \"Phonographic Record\";\n      }\n\n      if (tshirt && !vinyl && !cassette) {\n        sizeX = 26;\n        sizeY = 34;\n        sizeZ = 4;\n        return \"T-Shirt\";\n      }\n\n      if (!tshirt && !vinyl && cassette) {\n        sizeX = 8;\n        sizeY = 14;\n        sizeZ = 3;\n        return \"Cassette\";\n      }\n\n      if (tshirt && !vinyl && cassette) {\n        sizeX = 33;\n        sizeY = 33;\n        sizeZ = 4;\n        return \"T-Shirt & Cassette\";\n      }\n\n      if (!tshirt && vinyl && cassette) {\n        sizeX = 33;\n        sizeY = 33;\n        sizeZ = 4;\n        return \"Phonographic Record & Cassette\";\n      }\n\n      if (tshirt && vinyl && cassette) {\n        sizeX = 33;\n        sizeY = 33;\n        sizeZ = 4;\n        return \"Phonographic Record & T-Shirt & Cassette\";\n      }\n    });\n\n    let total = 0;\n    const amount = orderToBeShipped.purchasedItems.map(\n      (item) => (total += item.count)\n    );\n    const totalAmount = total * 25;\n    // // WITH CASSETTE\n    if (cassette && !vinyl && !tshirt) {\n      sizeZ = 3 * orderToBeShipped.purchasedItemsCount;\n    }\n    if (cassette && vinyl && total <= 2 && !tshirt) {\n      sizeZ = 4;\n    }\n    if (cassette && vinyl && total > 2) {\n      sizeZ = 13;\n    }\n    // NO CASETTE\n    if (total < 4 && !cassette) {\n      sizeZ = 4;\n    } else if (total >= 4 && total <= 20 && !cassette) {\n      sizeZ = 13;\n    } else if (total > 20 && !cassette) {\n      sizeZ = 27;\n    }\n\n    const weight = () => {\n      let totalWeight = 0;\n      let vinylAmount = 0;\n      let tShirtAmount = 0;\n      let cassetteAmount = 0;\n      orderToBeShipped.purchasedItems.map((item) => {\n        if (\n          item.variantSlug.indexOf(\"lp\") > -1 ||\n          item.variantSKU.indexOf(\"LP\") > -1\n        ) {\n          vinylAmount += item.count;\n        } else if (\n          item.variantSlug.indexOf(\"ts\") > -1 ||\n          item.variantSKU.indexOf(\"TS\") > -1\n        ) {\n          tShirtAmount += item.count;\n        } else if (\n          item.variantSlug.indexOf(\"cs\") > -1 ||\n          item.variantSKU.indexOf(\"cs\") > -1\n        ) {\n          cassetteAmount += item.count;\n        }\n      });\n      if (vinylAmount > 0) {\n        totalWeight += 0.6;\n      }\n      totalWeight += vinylAmount * 0.6;\n      totalWeight += tShirtAmount * 0.23;\n      totalWeight += cassetteAmount * 0.3;\n      return totalWeight;\n    };\n\n    let shipmentBody = {\n      name: orderToBeShipped.shippingAddress.addressee,\n      address_1: orderToBeShipped.shippingAddress.line1,\n      address_2: orderToBeShipped.shippingAddress.line2,\n      city: orderToBeShipped.shippingAddress.city,\n      province_code:\n        orderToBeShipped.shippingAddress.state === \"Ontario\"\n          ? \"ON\"\n          : orderToBeShipped.shippingAddress.state,\n      postal_code: orderToBeShipped.shippingAddress.postalCode,\n      country_code: orderToBeShipped.shippingAddress.country,\n      package_contents: \"merchandise\",\n      description: description.slice(-1)[0],\n      value: totalAmount,\n      value_currency: orderToBeShipped.netAmount.unit,\n      order_store: \"other\",\n      order_id: orderToBeShipped.orderId,\n      package_type: \"parcel\",\n      size_x: sizeX,\n      size_y: sizeY,\n      size_z: sizeZ,\n      weight: weight().toFixed(2),\n      size_unit: \"cm\",\n      weight_unit: \"lb\",\n      signature_requested: false,\n      insurance_requested: \"no\",\n      ship_date: \"today\",\n      postage_type: postage,\n    };\n\n    const res = await axiosWithDelimiterFile.post(\n      `/clients/${chitChatClientId}/shipments`,\n      shipmentBody,\n      {\n        headers: {\n          Authorization: chitChatTkn,\n        },\n      }\n    );\n\n    return {\n      id: res.data.shipment.id,\n      tracking: res.data.shipment.tracking_url,\n      rates: res.data.shipment.rates,\n      name: orderToBeShipped.shippingAddress.addressee,\n    };\n  } catch (error) {\n    console.log(error);\n    return \"error\";\n  }\n};\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/Card.js",["73","74","75"],"/* eslint-disable array-callback-return */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\nimport { useStoreActions } from \"easy-peasy\";\nimport { createShipment, buyShipment, getShipment } from \"../apis/chitchats\";\nimport { markAsShipped } from \"../apis/bandcamp\";\nimport Spinner from \"../logoidee.svg\";\n\nconst Card = ({ orderToBeShipped, shipments, token }) => {\n  console.log(orderToBeShipped);\n  // Initial component state\n  const [loading, setLoading] = useState(false);\n  const [checked, setChecked] = useState(false);\n  const [checkedShip, setCheckedShip] = useState(false);\n  const [removeShip, setRemoveShip] = useState(false);\n  const [complete, setComplete] = useState(false);\n  const [alreadyPurchased, setAlreadyPurchased] = useState(false);\n  const [preorder, setPreorder] = useState(false);\n  const [cannotProcess, setCannotProcess] = useState(false);\n  const [added, setAdded] = useState(false);\n  const [price, setPrice] = useState(null);\n  const [notificationSent, setNotificationSent] = useState(false);\n\n  const handleClick = () => setChecked(!checked);\n  const handleClickShip = () => {\n    setCheckedShip(!checkedShip);\n    setNotificationSent(true);\n    shipments.data.map(async (shipment) => {\n      if (orderToBeShipped[0].payment_id === Number(shipment.order_id)) {\n        markAsShipped(\n          token,\n          orderToBeShipped[0].payment_id,\n          shipment.tracking_url\n        );\n      }\n    });\n  };\n\n  // custom actions for redux store\n  const add = useStoreActions((actions) => actions.pngs.add);\n  const addInfo = useStoreActions((actions) => actions.pngs.addInfo);\n  const addError = useStoreActions((actions) => actions.errors.add);\n\n  // A small piece of UI to render the individual items from an order\n  // Highlight the amount if quantity is more than 1 of a single thing.\n  const items = orderToBeShipped.map((item) => {\n    return (\n      <li key={item.sale_item_id}>\n        <span className={`${item.quantity > 1 ? \"highlight\" : \"\"} quantity`}>\n          {item.quantity}\n        </span>\n        {item.item_name}\n      </li>\n    );\n  });\n\n  const createShipmentFunc = async (orderToBeShipped) => {\n    // Create the shipment based on information from bandcamp.\n    const shipment = await createShipment(orderToBeShipped);\n    // Handle errors during shipment creation, if chitchats errors\n    // We add the error to the store and update UI based on setCannotProcess\n    if (shipment === \"Something went wrong\" || shipment === undefined) {\n      addError(\"Error\");\n      setCannotProcess(true);\n    } else {\n      setLoading(true);\n      const shipmentBought = await buyShipment(shipment.id);\n      if (shipmentBought) {\n        // When we get the shipment after purchase so soon, the postage_label_png_url value is null\n        // We need to give chitchats time on their end to create that postage label and add it to the response object.\n        // To avoid calling the api over and over until its there, for now i'm just using a setTimeout.\n        setTimeout(async () => {\n          const getShipmentInfo = await getShipment(shipment.id);\n          setLoading(false);\n          add(getShipmentInfo.data.shipment.postage_label_png_url);\n          addInfo(orderToBeShipped);\n          setComplete(true);\n        }, 5000);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Go through all shipments on initial load and update state/render appropriate ui.\n    if (shipments) {\n      shipments.data.map((test) => {\n        if (\n          parseInt(test.order_id) === orderToBeShipped[0].payment_id &&\n          (test.status === \"ready\" ||\n            test.status === \"exception\" ||\n            test.status === \"received\" ||\n            test.status === \"delivered\" ||\n            test.status === \"inducted\")\n        ) {\n          setPrice(test.purchase_amount);\n          setAlreadyPurchased(true);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    // TODO: Create UI based on whether or not an item is a pre-order.\n    orderToBeShipped.map((item) => {\n      if (item.sku.includes(\"PO\")) {\n        setPreorder(true);\n      }\n    });\n\n    // if individual card is checked, shipment is created\n    if (checked) {\n      createShipmentFunc(orderToBeShipped);\n    }\n    // Once shipment is purchased, if shipment checkbox is selected, order will be marked as shipped in bandcamp DB\n    // and customer will get a confirmation email with tracking URL for their package.\n    if (checkedShip) {\n      shipments.data.map(async (shipment) => {\n        if (orderToBeShipped[0].payment_id === shipment.order_id) {\n          // markAsShipped(\n          //   token,\n          //   orderToBeShipped[0].payment_id,\n          //   shipment.tracking_url\n          // );\n        }\n      });\n    }\n  }, [checked, checkedShip]);\n\n  // TODO: Create UI based on whether or not an item is a pre-order.\n  // if(preorder) {\n  //   return (\n  //       <div key={orderToBeShipped[0].sale_item_id} className={`order blankOut`}>\n  //         <span className=\"date\">{orderToBeShipped[0].order_date.substring(0, orderToBeShipped[0].order_date.length - 12)}</span>\n  //         <p>Name: {orderToBeShipped[0].ship_to_name}</p>\n  //         <p>Country: {orderToBeShipped[0].ship_to_country}</p>\n  //         <div className=\"flexContainer\">\n  //           <p>Items</p>\n  //           <ul>{item}</ul>\n  //         </div>\n  //         <div className=\"individualShip\">\n  //         <>\n  //             <p className=\"tinyText\">Process Individual Shipment</p>\n  //             <input\n  //               className=\"checkbox\"\n  //               onClick={handleClick}\n  //               onChange={() => (confirmCreateShipment = true)}\n  //               checked={checked}\n  //               type=\"checkbox\"\n  //             />\n  //         </>\n  //       </div>\n  //       </div>\n  //     );\n  // }\n\n  if (notificationSent) {\n    return (\n      <div key={orderToBeShipped[0].sale_item_id} className={`order note-sent`}>\n        <div>\n          <span className=\"date\">\n            <div>\n              {orderToBeShipped[0].order_date.substring(\n                0,\n                orderToBeShipped[0].order_date.length - 12\n              )}\n            </div>\n            {orderToBeShipped[0].paypal_id ===\n              \"collected to cover your revenue share balance\"}\n          </span>\n        </div>\n        <div>\n          <p>{orderToBeShipped[0].ship_to_name}</p>\n          <p>{orderToBeShipped[0].ship_to_country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded opacity\">Purchased</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded button-proc\">NOTE SENT</button>\n        </div>\n      </div>\n    );\n  }\n\n  // Loading state\n  if (loading) {\n    return (\n      <div\n        key={orderToBeShipped[0].sale_item_id}\n        className={`order processing`}\n      >\n        <div>\n          <span className=\"date\">\n            <div>\n              {orderToBeShipped[0].order_date.substring(\n                0,\n                orderToBeShipped[0].order_date.length - 12\n              )}\n            </div>\n            {orderToBeShipped[0].paypal_id ===\n              \"collected to cover your revenue share balance\"}\n          </span>\n        </div>\n        <div>\n          <p>{orderToBeShipped[0].ship_to_name}</p>\n          <p>{orderToBeShipped[0].ship_to_country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded button-proc\">Processing</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded opacity\">Mark Shipped</button>\n        </div>\n      </div>\n    );\n  }\n\n  // This is what renders if a shipment cannot be created/errors during shipment creation.\n  if (cannotProcess) {\n    return (\n      <div\n        key={orderToBeShipped[0].sale_item_id}\n        className={`order manualComplete`}\n      >\n        <span className=\"date\">\n          <div>\n            {orderToBeShipped[0].order_date.substring(\n              0,\n              orderToBeShipped[0].order_date.length - 12\n            )}\n          </div>\n          {orderToBeShipped[0].paypal_id ===\n            \"collected to cover your revenue share balance\"}\n        </span>\n        <div>\n          <p>{orderToBeShipped[0].ship_to_name}</p>\n          <p>{orderToBeShipped[0].ship_to_country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded error-btn\">ERROR</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded opacity\">Mark Shipped</button>\n        </div>\n      </div>\n    );\n  }\n\n  // This is what renders if a shipment has already been created/purchased\n  // if (alreadyPurchased) {\n  //   return (\n  //     <div key={orderToBeShipped[0].sale_item_id} className={`order completeOrder`}>\n  //       <span className=\"date\">{orderToBeShipped[0].order_date.substring(0, orderToBeShipped[0].order_date.length - 12)}</span>\n  //       <div>\n  //         <p>{orderToBeShipped[0].ship_to_name}</p>\n  //         <p>{orderToBeShipped[0].ship_to_country}</p>\n  //       </div>\n  //       <div className=\"flexContainer\">\n  //         <ul>{items}</ul>\n  //       </div>\n  //       <div className=\"buttons\">\n  //         <button className=\"buttonRounded opacity\">Purchased</button>\n  // <button\n  //   className=\"buttonRounded reprint\"\n  //   disabled={added}\n  //   onClick={() => {\n  //     shipments.data.map(async (ship) => {\n  //       // If the order id matches the payment id we have our shipment.\n  //       if (parseInt(ship.order_id) === orderToBeShipped[0].payment_id) {\n  //         const getShipmentInfo = await getShipment(ship.id);\n  //         if (getShipmentInfo.data.shipment.status === \"ready\") {\n  //           // Update the store with the information for the shipment we want to print the label of.\n  //           add(getShipmentInfo.data.shipment.postage_label_png_url);\n  //           addInfo(orderToBeShipped);\n  //           setAdded(true);\n  //         }\n  //       }\n  //     });\n  //   }}\n  // >\n  //   {!added ? \"Reprint label\" : \"Added\"}\n  // </button>\n  //         {!removeShip && (\n  //           <button className=\"buttonRounded shipped\" onClick={handleClickShip}>\n  //             Mark Shipped\n  //           </button>\n  //         )}\n  //       </div>\n  //     </div>\n  //   );\n  // }\n\n  // Default UI for cards\n  // console.log(orderToBeShipped[0].ship_notes);\n  return (\n    <div\n      style={{\n        display: orderToBeShipped[0].ship_notes === \"HIDDEN\" ? \"none\" : \"\",\n      }}\n      key={orderToBeShipped[0].sale_item_id}\n      className={`order ${alreadyPurchased && \"completeOrder\"} ${\n        complete ? \"complete\" : \"\"\n      } ${checked ? \"pdfReady\" : \"\"} ${preorder ? \"blankOut\" : \"\"}`}\n    >\n      <span className=\"date\">\n        <div>\n          {orderToBeShipped[0].order_date.substring(\n            0,\n            orderToBeShipped[0].order_date.length - 12\n          )}\n        </div>\n        {orderToBeShipped[0].paypal_id ===\n        \"collected to cover your revenue share balance\"\n          ? \"Unavailable\"\n          : orderToBeShipped[0].paypal_id}\n      </span>\n      {alreadyPurchased && price !== null ? <div>${price}</div> : <div>-</div>}\n      <div className=\"name\">\n        <p>{orderToBeShipped[0].ship_to_name}</p>\n        <p>{orderToBeShipped[0].ship_to_country}</p>\n      </div>\n      <div className=\"flexContainer\">\n        <ul>{items}</ul>\n      </div>\n      <div className=\"buttons\">\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"opacity\" : \"purchase\"\n          }`}\n          onClick={() => handleClick()}\n        >\n          {alreadyPurchased ? \"Purchased\" : \"Purchase Postage\"}\n        </button>\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"reprint\" : \"opacity\"\n          }`}\n          disabled={added}\n          onClick={() => {\n            shipments.data.map(async (ship) => {\n              // If the order id matches the payment id we have our shipment.\n              console.log(ship);\n              if (\n                parseInt(ship.order_id) === orderToBeShipped[0].payment_id &&\n                (ship.status === \"ready\" || ship.status === \"inducted\")\n              ) {\n                const getShipmentInfo = await getShipment(ship.id);\n                // if (getShipmentInfo.data.shipment.status === \"ready\") {\n                // Update the store with the information for the shipment we want to print the label of.\n                add(getShipmentInfo.data.shipment.postage_label_png_url);\n                addInfo(orderToBeShipped);\n                setAdded(true);\n                // }\n              }\n            });\n          }}\n        >\n          {!added ? \"Reprint label\" : \"Added\"}\n        </button>\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"shipped\" : \"opacity\"\n          }`}\n          onClick={() => handleClickShip()}\n        >\n          Mark Shipped\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/PdfGenerator.js",["76","77"],"import React from \"react\";\nimport {\n  Page,\n  Text,\n  View,\n  Document,\n  StyleSheet,\n  Image,\n  PDFDownloadLink,\n  Font,\n} from \"@react-pdf/renderer\";\n\nconst PdfGenerator = ({ errors, urls, info }) => {\n  // This component handles generation and download of pdfs/shipping labels\n  info.map((order, i) => {\n    order.url = urls[i];\n  });\n\n  const PdfIdee = () => {\n    return (\n      <Document>\n        {info.map((order, i) => {\n          return (\n            <Page style={styles.body}>\n              <Image style={styles.image} src={order.url} />\n              <Text style={styles.title}>Packing List</Text>\n              {order.purchasedItems\n                ? order.purchasedItems.map((item) => {\n                    if (item.count > 1) {\n                      return (\n                        <Text style={styles.highlight}>{`Quanity: ${\n                          item.count\n                        }, Item: ${item.variantName.replace(\n                          \"Physical:\",\n                          \"\"\n                        )}`}</Text>\n                      );\n                    } else {\n                      return (\n                        <Text style={styles.text}>{`Quanity: ${\n                          item.count\n                        }, Item: ${item.variantName.replace(\n                          \"Physical:\",\n                          \"\"\n                        )}`}</Text>\n                      );\n                    }\n                  })\n                : order.map((item) => {\n                    if (item.quantity > 1) {\n                      return (\n                        <Text style={styles.highlight}>{`Quanity: ${\n                          item.quantity\n                        }, Item: ${item.option !== null ? item.option : \"\"} - ${\n                          item.item_name\n                        }`}</Text>\n                      );\n                    } else {\n                      return (\n                        <Text style={styles.text}>{`Quanity: ${\n                          item.quantity\n                        }, Item:  ${\n                          item.option !== null ? item.option : \"\"\n                        } - ${item.item_name}`}</Text>\n                      );\n                    }\n                  })}\n            </Page>\n          );\n        })}\n      </Document>\n    );\n  };\n\n  Font.register({\n    family: \"Oswald\",\n    src: \"https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf\",\n  });\n\n  const styles = StyleSheet.create({\n    body: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      paddingHorizontal: 0,\n      paddingVertical: 0,\n    },\n    title: {\n      fontSize: 24,\n      textAlign: \"center\",\n      fontFamily: \"Oswald\",\n      marginBottom: 10,\n      marginTop: 100,\n    },\n    highlight: {\n      backgroundColor: \"yellow\",\n      color: \"red\",\n      fontSize: 12,\n      textAlign: \"center\",\n      marginBottom: 10,\n    },\n    text: {\n      fontSize: 12,\n      textAlign: \"center\",\n      marginBottom: 10,\n      width: \"80%\",\n      marginHorizontal: \"auto\",\n    },\n    image: {\n      marginVertical: -5,\n      marginHorizontal: 150,\n      transform: \"rotate(90deg)\",\n      height: 500,\n      width: 300,\n    },\n  });\n  const todayDate = new Date().toISOString().slice(0, 10);\n\n  return (\n    <>\n      <PDFDownloadLink document={<PdfIdee />} fileName={`${todayDate}.pdf`}>\n        {({ blob, url, loading, error }) =>\n          loading ? \"Loading...\" : \"Download\"\n        }\n      </PDFDownloadLink>\n      <div className=\"errors\">Errors: {errors.length}</div>\n    </>\n  );\n};\n\nexport default PdfGenerator;\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/axios.js",[],"/Users/braedencraig/Desktop/idee-swyft-updates/src/apis/webflow.js",["78"],"import axios from \"axios\";\n\nexport const getOrdersUnshippedWebflow = async () => {\n  const response = await axios.get(\n    \"https://api.webflow.com/sites/5fd7cabbf4d7129fb098a4db/orders?access_token=d6d489cda5a6d6c1b769ac8faf0e47ed66ef8ac3546962f2e859bc69800700f3\"\n  );\n  const unfulfilled = await response.data.filter(\n    (order) => order.status === \"unfulfilled\"\n  );\n  return unfulfilled;\n};\n\nexport const markAsShippedWebflow = async (orderId, trackingUrl, url) => {\n  try {\n    const params = {\n      sendOrderFulfilledEmail: true,\n    };\n    console.log(url);\n\n    let headers = new Headers();\n\n    headers.append(\"Content-Type\", \"application/json\");\n    headers.append(\"Accept\", \"application/json\");\n    headers.append(\n      \"Authorization\",\n      \"Bearer \" +\n        \"d6d489cda5a6d6c1b769ac8faf0e47ed66ef8ac3546962f2e859bc69800700f3\"\n    );\n    headers.append(\"Origin\", \"http://localhost:3000\");\n\n    fetch(url, {\n      mode: \"no-cors\",\n      credentials: \"include\",\n      method: \"POST\",\n      headers: headers,\n    })\n      .then((response) => response.json())\n      .then((json) => console.log(json))\n      .catch((error) => console.log(\"Authorization failed: \" + error.message));\n    // const url = `https://api.webflow.com/sites/5fd7cabbf4d7129fb098a4db/order/${orderId}/fulfill`;\n    // const fulfillOrder = await axios.post(url, params, { json: true });\n    // return fulfillOrder;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/WebflowCard.js",["79","80","81","82","83","84"],"/* eslint-disable array-callback-return */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\nimport { useStoreActions } from \"easy-peasy\";\nimport {\n  createShipmentWebflow,\n  buyShipment,\n  getShipment,\n} from \"../apis/chitchats\";\nimport { markAsShippedWebflow } from \"../apis/webflow\";\nimport Spinner from \"../logoidee.svg\";\n\nconst WebflowCard = ({ orderToBeShipped, shipments, token }) => {\n  // Initial component state\n  const [loading, setLoading] = useState(false);\n  const [checked, setChecked] = useState(false);\n  const [checkedShip, setCheckedShip] = useState(false);\n  const [removeShip, setRemoveShip] = useState(false);\n  const [complete, setComplete] = useState(false);\n  const [alreadyPurchased, setAlreadyPurchased] = useState(false);\n  const [preorder, setPreorder] = useState(false);\n  const [cannotProcess, setCannotProcess] = useState(false);\n  const [added, setAdded] = useState(false);\n  const [price, setPrice] = useState(null);\n  const [notificationSent, setNotificationSent] = useState(false);\n  const [tracking, setTracking] = useState(\"\");\n\n  const handleClick = () => setChecked(!checked);\n  const handleClickShip = () => {\n    setCheckedShip(!checkedShip);\n    setNotificationSent(true);\n    shipments.data.map(async (shipment) => {\n      if (shipment.order_id === orderToBeShipped.orderId) {\n        const url = `https://api.webflow.com/sites/5fd7cabbf4d7129fb098a4db/order/${orderToBeShipped.orderId}/fulfill?access_token=d6d489cda5a6d6c1b769ac8faf0e47ed66ef8ac3546962f2e859bc69800700f3`;\n        markAsShippedWebflow(\n          orderToBeShipped.orderId,\n          shipment.tracking_url,\n          url\n        );\n      }\n    });\n  };\n\n  // custom actions for redux store\n  const add = useStoreActions((actions) => actions.webflowPngs.add);\n  const addInfo = useStoreActions((actions) => actions.webflowPngs.addInfo);\n  const addError = useStoreActions((actions) => actions.errors.add);\n\n  // A small piece of UI to render the individual items from an order\n  // Highlight the amount if quantity is more than 1 of a single thing.\n  const items = orderToBeShipped.purchasedItems.map((item) => {\n    return (\n      <li key={orderToBeShipped.orderId}>\n        <span className={`${item.count > 1 ? \"highlight\" : \"\"} quantity`}>\n          {item.count}\n        </span>\n        {item.variantName.replace(\"Physical:\", \"\")}\n      </li>\n    );\n  });\n\n  const createShipmentFunc = async (orderToBeShipped) => {\n    // Create the shipment based on information from bandcamp.\n    const shipment = await createShipmentWebflow(orderToBeShipped);\n    // Handle errors during shipment creation, if chitchats errors\n    // We add the error to the store and update UI based on setCannotProcess\n    if (shipment === \"Something went wrong\" || shipment === undefined) {\n      addError(\"Error\");\n      setCannotProcess(true);\n    } else {\n      setLoading(true);\n      const shipmentBought = await buyShipment(shipment.id);\n      if (shipmentBought) {\n        // When we get the shipment after purchase so soon, the postage_label_png_url value is null\n        // We need to give chitchats time on their end to create that postage label and add it to the response object.\n        // To avoid calling the api over and over until its there, for now i'm just using a setTimeout.\n        setTimeout(async () => {\n          const getShipmentInfo = await getShipment(shipment.id);\n          setLoading(false);\n          add(getShipmentInfo.data.shipment.postage_label_png_url);\n          addInfo(orderToBeShipped);\n          setComplete(true);\n        }, 5000);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Go through all shipments on initial load and update state/render appropriate ui.\n    if (shipments) {\n      shipments.data.map((test) => {\n        console.log(test, orderToBeShipped[0].payment_id);\n        // if (\n        //   parseInt(test.order_id) === orderToBeShipped[0].payment_id &&\n        //   (test.status === \"ready\" ||\n        //     test.status === \"exception\" ||\n        //     test.status === \"received\" ||\n        //     test.status === \"delivered\" ||\n        //     test.status === \"inducted\")\n        // ) {\n        //   setPrice(test.purchase_amount);\n        //   setTracking(test.tracking_url);\n        //   setAlreadyPurchased(true);\n        // }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    // TODO: Create UI based on whether or not an item is a pre-order.\n    orderToBeShipped.purchasedItems.map((item) => {\n      if (item.variantSKU.includes(\"PO\")) {\n        setPreorder(true);\n      }\n    });\n    // if individual card is checked, shipment is created\n    if (checked) {\n      createShipmentFunc(orderToBeShipped);\n    }\n    // Once shipment is purchased, if shipment checkbox is selected, order will be marked as shipped in bandcamp DB\n    // and customer will get a confirmation email with tracking URL for their package.\n    // if (checkedShip) {\n    //   shipments.data.map(async (shipment) => {\n    //     if (orderToBeShipped[0].payment_id === shipment.order_id) {\n    //       console.log(\"IT IS SHIPPER\");\n    //       // markAsShipped(\n    //       //   token,\n    //       //   orderToBeShipped[0].payment_id,\n    //       //   shipment.tracking_url\n    //       // );\n    //     }\n    //   });\n    // }\n  }, [checked, checkedShip]);\n\n  if (notificationSent) {\n    return (\n      <div key={orderToBeShipped.orderId} className={`order note-sent`}>\n        <div>\n          <span className=\"date\">\n            <div>\n              {orderToBeShipped.acceptedOn.substring(\n                0,\n                orderToBeShipped.acceptedOn.length - 14\n              )}\n            </div>\n            {orderToBeShipped.orderId}\n            {tracking !== \"\" && (\n              <a href={tracking} target=\"_blank\" rel=\"noreferrer\">\n                Tracking Url\n              </a>\n            )}\n          </span>\n        </div>\n        <div>\n          <p>{orderToBeShipped.customerInfo.fullName}</p>\n          <p>{orderToBeShipped.billingAddress.country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded opacity\">Purchased</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded button-proc\">NOTE SENT</button>\n        </div>\n      </div>\n    );\n  }\n\n  // Loading state\n  if (loading) {\n    return (\n      <div key={orderToBeShipped.orderId} className={`order processing`}>\n        <div>\n          <span className=\"date\">\n            <div>\n              {orderToBeShipped.acceptedOn.substring(\n                0,\n                orderToBeShipped.acceptedOn.length - 14\n              )}\n            </div>\n            {orderToBeShipped.orderId}\n          </span>\n        </div>\n        <div>\n          <p>{orderToBeShipped.customerInfo.fullName}</p>\n          <p>{orderToBeShipped.billingAddress.country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded button-proc\">Processing</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded opacity\">Mark Shipped</button>\n        </div>\n      </div>\n    );\n  }\n\n  // This is what renders if a shipment cannot be created/errors during shipment creation.\n  if (cannotProcess) {\n    return (\n      <div key={orderToBeShipped.orderId} className={`order manualComplete`}>\n        <span className=\"date\">\n          <div>\n            {orderToBeShipped.acceptedOn.substring(\n              0,\n              orderToBeShipped.acceptedOn.length - 14\n            )}\n          </div>\n          {orderToBeShipped.orderId}\n        </span>\n        <div>\n          <p>{orderToBeShipped.customerInfo.fullName}</p>\n          <p>{orderToBeShipped.billingAddress.country}</p>\n        </div>\n        <div className=\"flexContainer\">\n          <ul>{items}</ul>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"buttonRounded error-btn\">ERROR</button>\n          <button className=\"buttonRounded opacity\">Reprint label</button>\n          <button className=\"buttonRounded opacity\">Mark Shipped</button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      key={orderToBeShipped.orderId}\n      className={`order ${alreadyPurchased && \"completeOrder\"} ${\n        complete ? \"complete\" : \"\"\n      } ${checked ? \"pdfReady\" : \"\"} ${preorder ? \"blankOut\" : \"\"}`}\n    >\n      <span className=\"date\">\n        <div>\n          {orderToBeShipped.acceptedOn.substring(\n            0,\n            orderToBeShipped.acceptedOn.length - 14\n          )}\n        </div>\n        {orderToBeShipped.orderId}\n        {tracking !== \"\" && (\n          <a href={tracking} target=\"_blank\" rel=\"noreferrer\">\n            Tracking Url\n          </a>\n        )}\n      </span>\n      {alreadyPurchased && price !== null ? <div>${price}</div> : <div>-</div>}\n      <div className=\"name\">\n        <p>{orderToBeShipped.customerInfo.fullName}</p>\n        <p>{orderToBeShipped.billingAddress.country}</p>\n      </div>\n      <div className=\"flexContainer\">\n        <ul>{items}</ul>\n      </div>\n      <div className=\"buttons\">\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"opacity\" : \"purchase\"\n          }`}\n          onClick={() => handleClick()}\n        >\n          {alreadyPurchased ? \"Purchased\" : \"Purchase Postage\"}\n        </button>\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"reprint\" : \"opacity\"\n          }`}\n          disabled={added}\n          onClick={() => {\n            shipments.data.map(async (ship) => {\n              // If the order id matches the payment id we have our shipment.\n              if (\n                ship.order_id === orderToBeShipped.orderId &&\n                ship.status === \"ready\"\n              ) {\n                const getShipmentInfo = await getShipment(ship.id);\n                // if (getShipmentInfo.data.shipment.status === \"ready\") {\n                // Update the store with the information for the shipment we want to print the label of.\n                add(getShipmentInfo.data.shipment.postage_label_png_url);\n                addInfo(orderToBeShipped);\n                setAdded(true);\n                // }\n              }\n            });\n          }}\n        >\n          {!added ? \"Reprint label\" : \"Added\"}\n        </button>\n        <button\n          className={`buttonRounded ${\n            alreadyPurchased ? \"shipped\" : \"opacity\"\n          }`}\n          onClick={() => handleClickShip()}\n        >\n          Mark Shipped\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default WebflowCard;\n","/Users/braedencraig/Desktop/idee-swyft-updates/src/components/PdfGeneratorWebflow.js",["85","86","87","88"],"import React, { useEffect } from \"react\";\nimport {\n  Page,\n  Text,\n  View,\n  Document,\n  StyleSheet,\n  Image,\n  PDFDownloadLink,\n  Font,\n} from \"@react-pdf/renderer\";\nimport logo from \"../logo.svg\";\n\nconst PdfGeneratorWebflow = ({ errors, urls, info }) => {\n  info.map((order, i) => {\n    order.url = urls[i];\n  });\n\n  const PdfIdee = () => {\n    return (\n      <Document>\n        {info.map((order, i) => {\n          return (\n            <Page style={styles.body}>\n              <Image style={styles.image} src={order.url} />\n              <Text style={styles.title}>Packing List</Text>\n              {order.purchasedItems.map((item) => {\n                if (item.count > 1) {\n                  return (\n                    <Text\n                      style={styles.highlight}\n                    >{`Quanity: ${item.count}, Item: ${item.productName}`}</Text>\n                  );\n                } else {\n                  return (\n                    <Text\n                      style={styles.text}\n                    >{`Quanity: ${item.count}, Item: ${item.productName}`}</Text>\n                  );\n                }\n              })}\n            </Page>\n          );\n        })}\n      </Document>\n    );\n  };\n\n  Font.register({\n    family: \"Oswald\",\n    src: \"https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf\",\n  });\n\n  const styles = StyleSheet.create({\n    body: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      paddingHorizontal: 0,\n      paddingVertical: 0,\n    },\n    title: {\n      fontSize: 24,\n      textAlign: \"center\",\n      fontFamily: \"Oswald\",\n      marginBottom: 10,\n      marginTop: 100,\n    },\n    highlight: {\n      backgroundColor: \"yellow\",\n      color: \"red\",\n      fontSize: 12,\n      textAlign: \"center\",\n      marginBottom: 10,\n    },\n    text: {\n      fontSize: 12,\n      textAlign: \"center\",\n      marginBottom: 10,\n      width: \"80%\",\n      marginHorizontal: \"auto\",\n    },\n    image: {\n      marginVertical: -5,\n      marginHorizontal: 150,\n      transform: \"rotate(90deg)\",\n      height: 500,\n      width: 300,\n    },\n  });\n  const todayDate = new Date().toISOString().slice(0, 10);\n\n  return (\n    <>\n      <PDFDownloadLink document={<PdfIdee />} fileName={`${todayDate}.pdf`}>\n        {({ blob, url, loading, error }) =>\n          loading ? \"Loading document...\" : \"Download now!\"\n        }\n      </PDFDownloadLink>\n      <div className=\"errors\">Errors: {errors.length}</div>\n    </>\n  );\n};\n\nexport default PdfGeneratorWebflow;\n",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":2,"column":8,"nodeType":"95","messageId":"96","endLine":2,"endColumn":13},{"ruleId":"97","severity":1,"message":"98","line":222,"column":58,"nodeType":"99","messageId":"100","endLine":222,"endColumn":60},{"ruleId":"93","severity":1,"message":"101","line":4,"column":8,"nodeType":"95","messageId":"96","endLine":4,"endColumn":27},{"ruleId":"97","severity":1,"message":"98","line":36,"column":54,"nodeType":"99","messageId":"100","endLine":36,"endColumn":56},{"ruleId":"93","severity":1,"message":"102","line":107,"column":11,"nodeType":"95","messageId":"96","endLine":107,"endColumn":17},{"ruleId":"97","severity":1,"message":"103","line":133,"column":36,"nodeType":"99","messageId":"104","endLine":133,"endColumn":38},{"ruleId":"97","severity":1,"message":"98","line":294,"column":68,"nodeType":"99","messageId":"100","endLine":294,"endColumn":70},{"ruleId":"93","severity":1,"message":"102","line":363,"column":11,"nodeType":"95","messageId":"96","endLine":363,"endColumn":17},{"ruleId":"97","severity":1,"message":"103","line":391,"column":50,"nodeType":"99","messageId":"104","endLine":391,"endColumn":52},{"ruleId":"93","severity":1,"message":"105","line":7,"column":8,"nodeType":"95","messageId":"96","endLine":7,"endColumn":15},{"ruleId":"93","severity":1,"message":"106","line":15,"column":10,"nodeType":"95","messageId":"96","endLine":15,"endColumn":20},{"ruleId":"93","severity":1,"message":"107","line":15,"column":22,"nodeType":"95","messageId":"96","endLine":15,"endColumn":35},{"ruleId":"93","severity":1,"message":"108","line":5,"column":3,"nodeType":"95","messageId":"96","endLine":5,"endColumn":7},{"ruleId":"97","severity":1,"message":"103","line":15,"column":23,"nodeType":"99","messageId":"104","endLine":15,"endColumn":25},{"ruleId":"93","severity":1,"message":"109","line":15,"column":11,"nodeType":"95","messageId":"96","endLine":15,"endColumn":17},{"ruleId":"93","severity":1,"message":"105","line":11,"column":8,"nodeType":"95","messageId":"96","endLine":11,"endColumn":15},{"ruleId":"93","severity":1,"message":"106","line":18,"column":10,"nodeType":"95","messageId":"96","endLine":18,"endColumn":20},{"ruleId":"93","severity":1,"message":"107","line":18,"column":22,"nodeType":"95","messageId":"96","endLine":18,"endColumn":35},{"ruleId":"93","severity":1,"message":"110","line":20,"column":28,"nodeType":"95","messageId":"96","endLine":20,"endColumn":47},{"ruleId":"93","severity":1,"message":"111","line":24,"column":17,"nodeType":"95","messageId":"96","endLine":24,"endColumn":25},{"ruleId":"93","severity":1,"message":"112","line":26,"column":20,"nodeType":"95","messageId":"96","endLine":26,"endColumn":31},{"ruleId":"93","severity":1,"message":"113","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":26},{"ruleId":"93","severity":1,"message":"108","line":5,"column":3,"nodeType":"95","messageId":"96","endLine":5,"endColumn":7},{"ruleId":"93","severity":1,"message":"114","line":12,"column":8,"nodeType":"95","messageId":"96","endLine":12,"endColumn":12},{"ruleId":"97","severity":1,"message":"103","line":15,"column":23,"nodeType":"99","messageId":"104","endLine":15,"endColumn":25},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'PdfGeneratorWebflow' is defined but never used.","'amount' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'Spinner' is defined but never used.","'removeShip' is assigned a value but never used.","'setRemoveShip' is assigned a value but never used.","'View' is defined but never used.","'params' is assigned a value but never used.","'setAlreadyPurchased' is assigned a value but never used.","'setPrice' is assigned a value but never used.","'setTracking' is assigned a value but never used.","'useEffect' is defined but never used.","'logo' is defined but never used.","no-global-assign","no-unsafe-negation"]