[{"/Users/bcraig/Desktop/idee/src/index.js":"1","/Users/bcraig/Desktop/idee/src/App.js":"2","/Users/bcraig/Desktop/idee/src/reportWebVitals.js":"3","/Users/bcraig/Desktop/idee/src/components/PdfGenerator.js":"4","/Users/bcraig/Desktop/idee/src/components/Card.js":"5","/Users/bcraig/Desktop/idee/src/apis/bandcamp.js":"6","/Users/bcraig/Desktop/idee/src/components/Button.js":"7","/Users/bcraig/Desktop/idee/src/components/ShipmentRates.js":"8","/Users/bcraig/Desktop/idee/src/apis/chitchats.js":"9","/Users/bcraig/Desktop/idee/src/apis/axios.js":"10"},{"size":500,"mtime":1606789933533,"results":"11","hashOfConfig":"12"},{"size":2285,"mtime":1611709855748,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1606789933534,"results":"14","hashOfConfig":"12"},{"size":2280,"mtime":1611617657308,"results":"15","hashOfConfig":"12"},{"size":3607,"mtime":1611707358609,"results":"16","hashOfConfig":"12"},{"size":3291,"mtime":1611706601736,"results":"17","hashOfConfig":"12"},{"size":807,"mtime":1611619788198,"results":"18","hashOfConfig":"12"},{"size":2825,"mtime":1611704951658,"results":"19","hashOfConfig":"12"},{"size":4152,"mtime":1611707251956,"results":"20","hashOfConfig":"12"},{"size":789,"mtime":1611706815018,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"s4sshl",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/bcraig/Desktop/idee/src/index.js",[],["49","50"],"/Users/bcraig/Desktop/idee/src/App.js",["51"],"/Users/bcraig/Desktop/idee/src/reportWebVitals.js",[],"/Users/bcraig/Desktop/idee/src/components/PdfGenerator.js",["52","53","54","55"],"import React, { useEffect } from \"react\";\nimport {\n  Page,\n  Text,\n  View,\n  Document,\n  StyleSheet,\n  Image,\n  PDFDownloadLink,\n  Font,\n} from \"@react-pdf/renderer\";\nimport logo from \"../logo.svg\";\n\n// Create Document Component\nconst PdfGenerator = ({ todo, todoInfo }) => {\n  todoInfo.map((single, i) => {\n    single.url = todo[i]\n  })\n  \n  const Quixote = () => {\n    return (\n      <Document>\n        {todoInfo.map((order, i) => {\n          return (\n            <Page style={styles.body}>\n              <Image style={styles.image} src={order.url} />\n              <Text style={styles.title}>Packing List</Text>\n              <Text style={styles.author}>{order.item_name}</Text>\n              <Text style={styles.author}>{order.item_name}</Text>\n              <Text style={styles.author}>{order.item_name}</Text>\n              <Text style={styles.author}>{order.item_name}</Text>\n            </Page>\n          );\n        })}\n      </Document>\n    );\n  };\n\n  Font.register({\n    family: \"Oswald\",\n    src: \"https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf\",\n  });\n\n  const styles = StyleSheet.create({\n    body: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      paddingHorizontal: 0,\n    },\n    title: {\n      fontSize: 24,\n      textAlign: \"center\",\n      fontFamily: \"Oswald\",\n      marginBottom: 10,\n    },\n    author: {\n      fontSize: 12,\n      textAlign: \"center\",\n      marginBottom: 10,\n    },\n    subtitle: {\n      fontSize: 18,\n      margin: 12,\n      fontFamily: \"Oswald\",\n    },\n    text: {\n      margin: 12,\n      fontSize: 14,\n      textAlign: \"justify\",\n      fontFamily: \"Times-Roman\",\n    },\n    image: {\n      marginVertical: -20,\n      marginHorizontal: 100,\n      transform: \"rotate(90deg)\",\n    },\n    header: {\n      fontSize: 12,\n      marginBottom: 20,\n      textAlign: \"center\",\n      color: \"grey\",\n    },\n    pageNumber: {\n      position: \"absolute\",\n      fontSize: 12,\n      bottom: 30,\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      color: \"grey\",\n    },\n  });\n\n  return (\n    <PDFDownloadLink document={<Quixote />} fileName=\"somename.pdf\">\n      {({ blob, url, loading, error }) =>\n        loading ? \"Loading document...\" : \"Download now!\"\n      }\n    </PDFDownloadLink>\n  );\n};\n\nexport default PdfGenerator;\n","/Users/bcraig/Desktop/idee/src/components/Card.js",["56","57","58","59","60","61","62"],"import React, { useState, useEffect } from 'react'\nimport ShipmentRates from './ShipmentRates'\nimport { useStoreActions } from 'easy-peasy'\nimport { createShipment, buyShipment, getShipment } from '../apis/chitchats'\nimport Spinner from '../spinner.gif'\nimport PropTypes from 'prop-types'\n\n\nconst Card = ({ confirmCreateShipment, idx, orderToBeShipped, orderToBeShipped: { ship_to_country_code, ship_to_name, ship_to_street, ship_to_street_2, ship_to_city, ship_to_state, ship_to_country, ship_to_zip, buyer_email, buyer_phone } }) => {\n    const [rates, setRates] = useState([])\n    const [shipId, setShipId] = useState('')\n    const [name, setName] = useState('')\n    const [invalidRate, setInvalidRate] = useState(false)\n    const [loading, setLoading] = useState(false)\n\n    const add = useStoreActions((actions) => actions.pngs.add)\n    const addInfo = useStoreActions((actions) => actions.pngs.addInfo)\n\n    const createShipmentFunc = async (orderToBeShipped) => {\n        let namesOfRates = []\n        const shipment = await createShipment(orderToBeShipped)\n        console.log(shipment)\n        shipment.rates.map(rate => namesOfRates.push(rate.postage_type))\n        const hasAsendia = namesOfRates.includes('asendia_priority_tracked')\n        setShipId(shipment.id)\n        // if(!isNorthAmerica && !hasAsendia) {\n        //     setInvalidRate(true)\n        //     setRates(shipment.rates)\n        // } else {\n            if(shipment.id) {\n                setLoading(true)\n                setTimeout(() => {\n                    const shipmentBought = buyShipment(shipment.id)\n                    shipmentBought.then(res => {\n                        if(res) {\n                            setTimeout(() => {\n                                const getShipmentInfo = getShipment(shipment.id)\n                                getShipmentInfo.then(info => {\n                                    setLoading(false)\n                                    add(info.data.shipment.postage_label_png_url)\n                                })\n                            }, 10000)\n                        }\n                    })\n                }, 9000)\n            }\n        // }\n    }\n\n    useEffect(() => {\n        setName(ship_to_name)\n        if(name && confirmCreateShipment) {\n            createShipmentFunc(orderToBeShipped)\n            addInfo(orderToBeShipped)\n        }\n    }, [setRates, setShipId, confirmCreateShipment, setName, setInvalidRate, setLoading])\n\n    const isNorthAmerica = ship_to_country_code === 'CA' || ship_to_country_code === 'US'\n\n    if(loading) {\n        return (\n            <img src={Spinner} alt=\"\"/>\n        )\n    } else {\n        return (\n            <div key={idx} className={`order ${confirmCreateShipment && !invalidRate ? 'selected' : 'error'}`}>\n            <p>Name: {ship_to_name}</p>\n            <p>Address: {ship_to_street}</p>\n            {ship_to_street_2 !== null ?  <p>Address2: {ship_to_street_2}</p> : '' }\n            <p>City: {ship_to_city}</p>\n            <p>State/Province: {ship_to_state}</p>\n            <p>Country: {ship_to_country}</p>\n            <p>Zip-Postal: {ship_to_zip}</p>\n            <p>Phone: {buyer_phone}</p>\n            <p>Email: {buyer_email}</p>\n            {/* {!isNorthAmerica ? <ShipmentRates idx={idx} shipId={shipId} rates={rates} /> : ''} */}\n            {/* <button className=\"btn\" onClick={async (e) => {\n                // const test = await markAsShipped(token, orderToBeShipped, shipment.tracking)\n            }}>Create & Buy Shipment</button> */}\n            </div>\n        )\n    }\n\n}\n\nCard.propTypes = {\n\n}\n\nexport default Card\n\n","/Users/bcraig/Desktop/idee/src/apis/bandcamp.js",["63"],"import axios from \"axios\";\n// ADD TRY CATCHES TO ALL API CALLS\n// handle the 400 bad request here to call again\n\nexport const getCredentials = async () => {\n    const client_id = process.env.REACT_APP_BANDCAMP_CLIENT_ID;\n    const client_secret = process.env.REACT_APP_BANDCAMP_CLIENT_SECRET;\n    const dataType = \"json\";\n    const grant_type = \"client_credentials\";\n    const credentials = await axios.post(\n      `/oauth_token`,\n      null,\n      {\n        params: {\n          client_id,\n          client_secret,\n          dataType,\n          grant_type,\n        },\n      }\n    );\n    if(credentials.status === 200) {\n      return credentials;\n    }\n    if(credentials.status === 400) {\n      const retry = await axios.post(\n        `/oauth_token`,\n        null,\n        {\n          params: {\n            client_id,\n            client_secret,\n            dataType,\n            grant_type,\n          },\n        }\n      );\n      return retry;\n    }\n};\n\nexport const getBands = async (token) => {\n    const config = {\n      headers: { Authorization: `Bearer ${token}` },\n    };\n    // const bodyParameters = {\n    //   key: \"value\",\n    // };\n    const getBands = await axios.post(\n      \"/api/account/1/my_bands\",\n      null,\n      config\n    );\n    return getBands;\n};\n\n  // THIS IS FOR ACTUAL LABEL \n      // band_id: bands.data.bands[2].band_id,\nexport const getOrdersUnshipped = async (token, bands) => {\n    const config = {\n      headers: { Authorization: `Bearer ${token}` },\n    };\n    const params = {\n      band_id: bands.data.bands[0].band_id,\n      unshipped_only: true,\n    };\n    const allOrders = await axios.post(\n      \"/api/merchorders/3/get_orders\",\n      params,\n      config\n    );\n    return allOrders\n}\n\nexport const getAllRecentOrders = async (token, bands) => {\n    const config = {\n      headers: { Authorization: `Bearer ${token}` },\n    };\n    const oneMonthsAgo = new Date();\n    oneMonthsAgo.setMonth(oneMonthsAgo.getMonth() - 1);\n    const recentDateFrom = `${oneMonthsAgo.getFullYear()}-${oneMonthsAgo.getMonth()}-01`\n    \n    const params = {\n      band_id: bands.data.bands[2].band_id,\n      start_time: recentDateFrom\n    };\n    const allRecentOrders = await axios.post(\n      \"/api/merchorders/3/get_orders\",\n      params,\n      config\n    );\n    return allRecentOrders\n}\n\nexport const markAsShipped = async (token, orderToBeShipped, trackingUrl) => {\n  // THIS WORKS DONT USE BECAUSE IT FUCKS SHIT UP, ask alex to make a bunch of fake orders so I can mark as shipped?!?!?!?!\n  // WHEN inducted/released, click buttton that takes all orders that are received and then markAsShipped, inducted on clikc, then send mark as shipped.\n  // \n  const config = {\n    headers: { Authorization: `Bearer ${token}` },\n  };\n  const params = {\n    items: [\n      {\n        id: orderToBeShipped.payment_id,\n        id_type: \"p\",\n        shipped: true,\n        tracking_code: trackingUrl,\n        notification: true,\n        notification_message: `Your items will be shipped within 24 hours! Your tracking url is ${trackingUrl}`\n      }\n    ]\n  }\n    \n  return params\n\n  // const shippedOrder = await axios.post(\n  //   \"/api/merchorders/2/update_shipped\",\n  //   params,\n  //   config\n  // );\n  // console.log(shippedOrder, 'ORDER SHIPPED?!?!')\n  // return shippedOrder\n}","/Users/bcraig/Desktop/idee/src/components/Button.js",["64","65"],"import React, { useState, useEffect, useRef } from 'react'\nimport { useStoreState } from 'easy-peasy'\nimport PdfGenerator from '../components/PdfGenerator'\n\n\n\nconst Button = () => {\n    const [count, setCount] = useState(0);\n    const prevCountRef = useRef();\n    useEffect(() => {\n        prevCountRef.current = count;\n    }, [setCount]);\n    const prevCount = prevCountRef.current;\n\n    let todo = useStoreState((state) => state.pngs.urls);\n    let todoInfo = useStoreState((state) => state.pngs.info);\n\n    return (\n        <>\n        <button onClick={() => {\n            setCount(prevState => prevState + 1)\n        }}>\n            Create shipping pdf/packing download\n        </button>\n        {count > 0 && (<PdfGenerator todo={todo} todoInfo={todoInfo} />)}\n        </>\n    )\n}\n\nexport default Button","/Users/bcraig/Desktop/idee/src/components/ShipmentRates.js",["66"],"import React, { useEffect, useState } from 'react'\nimport { useStoreActions, useStoreState } from 'easy-peasy'\nimport { buyShipment, getShipment } from '../apis/chitchats'\nimport Spinner from '../spinner.gif'\n\nconst ShipmentRates = ({ rates, shipId, idx }) => {\n    let namesOfRates = []\n    rates.map(rate => namesOfRates.push(rate.postage_type))\n    const hasAsendia = namesOfRates.includes('asendia_priority_tracked')\n\n    const [rate, setRate] = useState('')\n    const [shipmentBought, setShipmentBought] = useState(false)\n    const [loading, setLoading] = useState(false)\n\n\n    const add = useStoreActions((actions) => actions.pngs.add)\n\n    useEffect(() => {\n    }, [hasAsendia, rates, rate, setShipmentBought, setLoading])\n     if(loading) {\n        return (\n            <img src={Spinner} alt=\"\"/>\n        )\n    } else {\n\n        return (\n            <>\n            {rates.length !== 0 && !hasAsendia && !shipmentBought ? (\n                <div className='selectShipment'>\n                    <h3>Please select an alternative shipment rate, asendia priority tracked unavailable</h3>\n                    <label htmlFor=\"rates\">Choose a shipment rate:</label>\n                    <select name=\"rates\" id=\"rates\" onChange={(e) => {\n                        setRate(e.target.value)\n                    }}>\n                    {rates.length !== 0 && rates.map(rate => {\n                        return <option value={rate.postage_type}>{rate.postage_type}</option>\n                    })}\n                    </select>\n                    <button onClick={() => {\n                        setLoading(true)\n                        const shipmentBought = buyShipment(shipId, rate)\n                        setShipmentBought(true)\n                        shipmentBought.then(res => {\n                            if(res) {\n                                setTimeout(() => {\n                                    const getShipmentInfo = getShipment(shipId)\n                                    getShipmentInfo.then(info => {\n                                        setLoading(false)\n                                        add(info.data.shipment.postage_label_png_url)\n                                    })\n                                }, 10000)\n                            }\n                        })\n                        // const errorBoxes = Array.from(document.getElementsByClassName('error'))\n                        // errorBoxes.map(error => {\n                        //     if(Array.from(error.children).length === 9) {\n                        //         error.style.display = 'none'\n                        //     }\n                        // })\n                    }}>Buy shipment with selected rate</button>\n                </div>\n            ) : ''}\n            </>\n        )\n    }\n\n}\n\nexport default ShipmentRates","/Users/bcraig/Desktop/idee/src/apis/chitchats.js",["67","68","69","70"],"import axios from \"axios\";\nimport axiosWithDelimiterFile from '../apis/axios'\n\n// ADD TRY CATCHES TO ALL API CALLS AND DO ERROR HANDLING FOR THE APPLICATION\n\nconst chitChatTkn = process.env.REACT_APP_CHITCHATS_API_SECRET_STAGING\nconst chitChatClientId = process.env.REACT_APP_CHITCHATS_API_CLIENT_ID_STAGING\n\nexport const createShipment = async (orderToBeShipped) => {\n    try {\n        const {ship_to_name, ship_to_street, ship_to_street_2, ship_to_city, ship_to_state, ship_to_country_code, ship_to_zip, buyer_phone, buyer_email, sub_total, currency, paypal_id, quantity, order_total, item_name} = await orderToBeShipped\n\n        let postageType = () => {\n            if(ship_to_country_code === 'SI') {\n                return \"usps_first_class_package_international_service\"\n            }\n            if(ship_to_country_code === 'CA') {\n                return \"chit_chats_canada_tracked\"\n            } else if(ship_to_country_code === 'US') {\n                return \"usps_media_mail\"\n            } else {    \n                return \"asendia_priority_tracked\"\n            }\n        }\n\n        console.log(orderToBeShipped)\n        // quantity, order_total, item_name\n        // OH EACH ORDER, CAN BE PART OF QUANTITY 2, COULD BE A RECORD FROM ONE ORDER< and A TSHIRT FROM ANOTHER, THEY ARENT GROUPED TOGETHER.\n\n        let postage = postageType()\n    \n        let shipmentBody = {\n            name: ship_to_name,\n            address_1: ship_to_street,\n            address_2: ship_to_street_2,\n            city: ship_to_city,\n            province_code: ship_to_state,\n            postal_code: ship_to_zip,\n            country_code: ship_to_country_code,\n            phone: buyer_phone,\n            package_contents: \"merchandise\",\n            description: \"Phonographic Record\",\n            value: sub_total,\n            value_currency: currency,\n            order_store: \"other\",\n            order_id: paypal_id,\n            package_type: \"parcel\",\n            size_x: 33,\n            size_y: 33,\n            size_z: 4,\n            weight: 1.2,\n            size_unit: \"cm\",\n            weight_unit: \"lb\",\n            signature_requested: false,\n            insurance_requested: 'no',\n            ship_date: \"today\",\n            postage_type: postage\n        }\n    \n        const res = await axios.post(`/clients/${chitChatClientId}/shipments`,\n        shipmentBody,\n         {\n            headers: {\n                Authorization: chitChatTkn\n            }\n        })\n    \n        return {\n            id: res.data.shipment.id,\n            tracking: res.data.shipment.tracking_url,\n            rates: res.data.shipment.rates,\n            name: ship_to_name\n        }\n        \n    } catch (error) {\n        console.log(error, orderToBeShipped.ship_to_country_code)\n    }\n}\n\nexport const getShipment = async (id) => {\n    const res = await axios.get(`/clients/${chitChatClientId}/shipments/${id}`, {\n        headers: {\n            Authorization: chitChatTkn\n        }  \n    });\n    if(res.status === 200) {\n        return res\n    } else {\n        console.log('HERERERE')\n        return false\n    }\n}\n\nexport const buyShipment = async (shipmentId, postageType = null) => {\n    if(postageType === null) {\n        const res = await axiosWithDelimiterFile.patch(`/clients/${chitChatClientId}/shipments/${shipmentId}/buy`, null, {\n            headers: {\n                Authorization: chitChatTkn\n            }\n        })\n        if(res.status === 200) {\n            return true\n        }\n        // if(res.status === 400) {\n        //     const res = await axios.patch(`/clients/${chitChatClientId}/shipments/${shipmentId}/buy`, null, {\n        //         headers: {\n        //             Authorization: chitChatTkn\n        //         }\n        //     })\n        //     return true\n        // }\n    } else {\n        const params = {\n            postage_type: postageType\n        }\n        const res = await axios.patch(`/clients/${chitChatClientId}/shipments/${shipmentId}/buy`, params, {\n            headers: {\n                Authorization: chitChatTkn\n            }\n        })\n        if(res.status === 200) {\n            return true\n        }\n    }\n}\n","/Users/bcraig/Desktop/idee/src/apis/axios.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":2,"column":46,"nodeType":"77","messageId":"78","endLine":2,"endColumn":59},{"ruleId":"75","severity":1,"message":"79","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":26},{"ruleId":"75","severity":1,"message":"80","line":5,"column":3,"nodeType":"77","messageId":"78","endLine":5,"endColumn":7},{"ruleId":"75","severity":1,"message":"81","line":12,"column":8,"nodeType":"77","messageId":"78","endLine":12,"endColumn":12},{"ruleId":"82","severity":1,"message":"83","line":16,"column":28,"nodeType":"84","messageId":"85","endLine":16,"endColumn":30},{"ruleId":"75","severity":1,"message":"86","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":21},{"ruleId":"75","severity":1,"message":"87","line":6,"column":8,"nodeType":"77","messageId":"78","endLine":6,"endColumn":17},{"ruleId":"75","severity":1,"message":"88","line":10,"column":12,"nodeType":"77","messageId":"78","endLine":10,"endColumn":17},{"ruleId":"75","severity":1,"message":"89","line":11,"column":12,"nodeType":"77","messageId":"78","endLine":11,"endColumn":18},{"ruleId":"75","severity":1,"message":"90","line":24,"column":15,"nodeType":"77","messageId":"78","endLine":24,"endColumn":25},{"ruleId":"91","severity":1,"message":"92","line":56,"column":8,"nodeType":"93","endLine":56,"endColumn":89,"suggestions":"94"},{"ruleId":"75","severity":1,"message":"95","line":58,"column":11,"nodeType":"77","messageId":"78","endLine":58,"endColumn":25},{"ruleId":"75","severity":1,"message":"96","line":99,"column":9,"nodeType":"77","messageId":"78","endLine":99,"endColumn":15},{"ruleId":"91","severity":1,"message":"97","line":12,"column":8,"nodeType":"93","endLine":12,"endColumn":18,"suggestions":"98"},{"ruleId":"75","severity":1,"message":"99","line":13,"column":11,"nodeType":"77","messageId":"78","endLine":13,"endColumn":20},{"ruleId":"75","severity":1,"message":"76","line":2,"column":27,"nodeType":"77","messageId":"78","endLine":2,"endColumn":40},{"ruleId":"75","severity":1,"message":"100","line":11,"column":141,"nodeType":"77","messageId":"78","endLine":11,"endColumn":152},{"ruleId":"75","severity":1,"message":"101","line":11,"column":186,"nodeType":"77","messageId":"78","endLine":11,"endColumn":194},{"ruleId":"75","severity":1,"message":"102","line":11,"column":196,"nodeType":"77","messageId":"78","endLine":11,"endColumn":207},{"ruleId":"75","severity":1,"message":"103","line":11,"column":209,"nodeType":"77","messageId":"78","endLine":11,"endColumn":218},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'useStoreState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'View' is defined but never used.","'logo' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'ShipmentRates' is defined but never used.","'PropTypes' is defined but never used.","'rates' is assigned a value but never used.","'shipId' is assigned a value but never used.","'hasAsendia' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addInfo', 'createShipmentFunc', 'name', 'orderToBeShipped', and 'ship_to_name'. Either include them or remove the dependency array. If 'setName' needs the current value of 'ship_to_name', you can also switch to useReducer instead of useState and read 'ship_to_name' in the reducer.","ArrayExpression",["106"],"'isNorthAmerica' is assigned a value but never used.","'config' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'count'. Either include it or remove the dependency array.",["107"],"'prevCount' is assigned a value but never used.","'buyer_email' is assigned a value but never used.","'quantity' is assigned a value but never used.","'order_total' is assigned a value but never used.","'item_name' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [setRates, setShipId, confirmCreateShipment, setName, setInvalidRate, setLoading, ship_to_name, name, createShipmentFunc, orderToBeShipped, addInfo]",{"range":"112","text":"113"},"Update the dependencies array to be: [count, setCount]",{"range":"114","text":"115"},[2377,2458],"[setRates, setShipId, confirmCreateShipment, setName, setInvalidRate, setLoading, ship_to_name, name, createShipmentFunc, orderToBeShipped, addInfo]",[327,337],"[count, setCount]"]